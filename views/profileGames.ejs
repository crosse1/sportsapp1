<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - Games</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/custom.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        .profile-header { background: linear-gradient(to right, #7e22ce, #14b8a6); }
        .trophy-panel { background-color: rgba(255,255,255,0.15); }
        .follow-btn { transition: background-color 0.3s, color 0.3s; }
        .avatar { border-radius: 50%; object-fit: cover; border: 2px solid rgba(255, 255, 255, 0.8); display: inline-block; }
        .profile-avatar { display: block; margin-left: auto; margin-right: auto; }
        .profile-search.form-control { background-color: rgba(255, 255, 255, 0.2) !important; border: 1px solid #ccc !important; color: #fff !important; border-radius: 8px !important; padding: 0.5rem 1rem !important; font-family: inherit !important; font-weight: bold !important; font-size: 1.1rem !important; }
        .profile-search.form-control::placeholder { color: rgba(255, 255, 255, 0.7) !important; font-style: italic; }
        .profile-search.form-control:focus { outline: none !important; box-shadow: 0 0 0 3px rgba(204, 204, 204, 0.5) !important; border-color: #bbb !important; }
        .user-search-modal .modal-content { background: linear-gradient(to right, #7e22ce, #14b8a6); background-clip: padding-box; border-radius: 1rem; border: 1px solid rgba(255, 255, 255, 0.2); box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3); color: #fff; backdrop-filter: blur(10px); font-family: inherit; }
        .user-search-modal .modal-title { font-family: inherit; font-weight: bold; font-size: 1.5rem; color: #fff; }
        .user-search-modal .btn-close { filter: invert(1); }
        .user-search-modal .profile-search.form-control { background-color: rgba(255, 255, 255, 0.2) !important; border: 1px solid #ccc !important; color: #fff !important; font-family: inherit !important; font-weight: bold !important; font-size: 1.1rem !important; border-radius: 8px !important; padding: 0.5rem 1rem 0.5rem 2.5rem !important; transition: box-shadow 0.2s ease, border-color 0.2s ease; }
        .user-search-modal .profile-search.form-control::placeholder { color: rgba(255, 255, 255, 0.7) !important; font-style: italic; }
        .user-search-modal .profile-search.form-control:focus { outline: none !important; box-shadow: 0 0 0 3px rgba(204, 204, 204, 0.5) !important; border-color: #bbb !important; }
        .game-date-banner {
    font-size: 1.5rem; /* Larger font size */
    font-weight: bold;
    color: #333; /* Dark text */
    text-align: left; /* Left justified */
    margin-bottom: 0.5rem;
}
        .team-filter-wrapper {
            max-width: 420px;
            margin: 0 0 1.5rem;
            position: relative;
        }
        .team-filter-input {
            width: 100%;
            border: none;
            border-radius: 0;
            border-bottom: 1px solid transparent;
            padding: 0.35rem 0;
            font-weight: 700;
            color: transparent;
            caret-color: #7e22ce;
            background-color: transparent;
            background-image: linear-gradient(135deg, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            border-image: linear-gradient(135deg, #14b8a6, #7e22ce) 1;
            border-image-slice: 1;
        }
        .team-filter-input:focus {
            outline: none;
            box-shadow: none;
        }
        .team-filter-input::placeholder {
            font-weight: 700;
            background: linear-gradient(135deg, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
        }
        .team-filter-dropdown {
            position: absolute;
            top: calc(100% + 0.35rem);
            left: 0;
            right: 0;
            background-color: #ffffff;
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            box-shadow: 0 10px 30px rgba(15, 23, 42, 0.08);
            z-index: 1040;
            overflow: hidden;
        }
        .team-filter-options {
            max-height: 260px;
            overflow-y: auto;
        }
        .team-filter-option {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.6rem 0.85rem;
            cursor: pointer;
            border-bottom: 1px solid #e5e7eb;
            transition: background-color 0.2s ease;
        }
        .team-filter-option:last-child {
            border-bottom: none;
        }
        .team-filter-option:hover,
        .team-filter-option:focus {
            background-color: #f8fafc;
        }
        .team-option-logo {
            width: 28px;
            height: 28px;
            object-fit: contain;
        }
        .team-option-name {
            font-weight: 700;
            background: linear-gradient(135deg, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
        }
        @media (min-width: 768px) { .profile-avatar { margin-left: 0; margin-right: 0; } }
        .avatar-lg { width: clamp(80px, 20vw, 300px); height: clamp(80px, 20vw, 300px); }
        .avatar-sm { width: clamp(40px, 10vw, 60px); height: clamp(40px, 10vw, 60px); }
        .text-gradient {
            background: linear-gradient(135deg, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
            display: inline-block;
        }
        .followed-attendees {
            margin-top: 1rem;
        }
        .followed-attendees-list {
            display: flex;
            flex-wrap: wrap;
            gap: 0.75rem;
            align-items: flex-start;
        }
        .attendee-avatar {
            display: flex;
            flex-direction: column;
            align-items: center;
            font-size: 0.75rem;
            min-width: 48px;
        }
        .attendee-avatar img {
            width: 40px;
            height: 40px;
            object-fit: cover;
            border-radius: 50%;
            border: 2px solid rgba(255, 255, 255, 0.8);
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
        }
        .attendee-check-icon {
            font-size: 0.9rem;
            margin-top: 0.25rem;
        }
        .attendee-check-placeholder {
            display: block;
            height: 1.1rem;
            margin-top: 0.25rem;
        }
        .attendee-more {
            font-weight: 700;
            font-size: 0.95rem;
            align-self: center;
        }

        .unrated-icon {
            color: red;
            margin-left: 0.25rem;
            cursor: pointer;
        }

        /* Mobile-specific adjustments */
        @media (max-width: 768px) {
            #profileGamesWrapper .team-logo-container {
                width: 34px;
                height: 34px;
                
            }
            #profileGamesWrapper .team-logo-container img {
                width: 34px;
                height: 34px;
                
            }

            #profileGamesWrapper .logo-wrapper {
                padding-top: 1rem;
                
                
            }
            #profileGamesWrapper .score-text {
                font-size: 1rem;
                padding-top: 1rem;
                padding-left: 1rem;
                padding-right: 1rem;
                
                
            }
            #profileGamesWrapper .game-card {
                padding: 0.5rem;
            }
        }
    </style>
</head>
<body class="d-flex flex-column min-vh-100">
    <%- include('partials/header') %>
    <%- include('partials/profileHeader', { user, isCurrentUser, isFollowing, canMessage, viewer, activeTab: 'games' }) %>
    <div id="profileGamesWrapper" class="container my-4 flex-grow-1">
        <% if(isCurrentUser){ %>
        <div class="info-banner d-flex flex-wrap align-items-center justify-content-between mb-3">
            <div class="d-flex align-items-center flex-grow-1 mb-2 mb-md-0">
                <i class="bi bi-info-circle fs-5 me-2"></i>
                <span style="font-size: 12px">Press the +Game button to add a game from the past. Games added from the past will contribute toward stats but not toward badges and rankings.</span>
            </div>
        </div>
        <% } %>
        <% 
           const profileIdentifier = (user && (user.venmo || user._id)) || '';
           const hasGameEntries = gameEntries && gameEntries.length > 0;
           const showTeamFilter = gameEntries && gameEntries.length >= 5;
           const teamOptions = [];
           if (showTeamFilter) {
                const seenTeams = {};
                (gameEntries || []).forEach(function(entry){
                    const g = entry && entry.game ? entry.game : {};
                    const awayName = g.awayTeamName || '';
                    const homeName = g.homeTeamName || '';
                    const awayLogo = (g.awayTeam && g.awayTeam.logos && g.awayTeam.logos[0]) || '/images/placeholder.jpg';
                    const homeLogo = (g.homeTeam && g.homeTeam.logos && g.homeTeam.logos[0]) || '/images/placeholder.jpg';
                    if (awayName && !seenTeams[awayName]) {
                        seenTeams[awayName] = awayLogo;
                    }
                    if (homeName && !seenTeams[homeName]) {
                        seenTeams[homeName] = homeLogo;
                    }
                });
                Object.keys(seenTeams).sort().forEach(function(name){
                    teamOptions.push({ name: name, logo: seenTeams[name] });
                });
           }
           if (hasGameEntries) { %>
        <% if (showTeamFilter) { %>
        <div class="team-filter-wrapper mb-4">
            <input type="text"
                   id="teamFilterInput"
                   class="team-filter-input"
                   placeholder="Filter by Team"
                   autocomplete="off"
                   role="combobox"
                   aria-expanded="false"
                   aria-autocomplete="list"
                   aria-controls="teamFilterDropdown">
            <div id="teamFilterDropdown" class="team-filter-dropdown d-none" role="listbox">
                <div class="team-filter-options"></div>
            </div>
        </div>
        <% } %>
        <div class="row row-cols-1 row-cols-md-1 row-cols-lg-1 g-4 " id="profileGamesContainer">
            <% gameEntries.forEach(function(entry){
                 const game = entry.game;
                 if(!game){ return; }
                 const awayColor = game.awayTeam && game.awayTeam.color ? game.awayTeam.color : '#ffffff';
                 const homeColor = game.homeTeam && game.homeTeam.color ? game.homeTeam.color : '#ffffff';
                 const entryKey = entry._id || entry.gameId;
                 const normalizedGameId = game.gameId || game.Id || game._id || entry.gameId;
                 const canRate = isCurrentUser && (entry.elo === null || entry.elo === undefined);
                 const homeTeamName = game.homeTeamName || '';
                 const awayTeamName = game.awayTeamName || '';
                 const homeTeamKey = homeTeamName.toLowerCase();
                 const awayTeamKey = awayTeamName.toLowerCase();
            %>
            <div class="col" data-home-team-key="<%= homeTeamKey %>" data-away-team-key="<%= awayTeamKey %>">

                <div class="game-container">
                    <div class="game-date-banner mb-1 d-flex align-items-center">
                        <% const dateObj = new Date(game.startDate || game.StartDate); %>
                        <span><%= (dateObj.getMonth() + 1).toString().padStart(2, '0') %>/<%= dateObj.getDate().toString().padStart(2, '0') %>/<%= dateObj.getFullYear() %></span>
                        <% if (entry.checkedIn) { %>
                            <span class="checked-in-status ms-2" title="Checked in">
                                <i class="bi bi-check-circle-fill text-gradient" aria-hidden="true"></i>
                                <span class="visually-hidden">Checked in</span>
                            </span>
                        <% } %>

                        <% if (isCurrentUser && (entry.elo === null || entry.elo === undefined)) { %>
                            <i class="bi bi-exclamation-circle-fill unrated-icon"
                               data-bs-toggle="tooltip"
                               title="This game is unrated, click the game to rate it"></i>
                        <% } %>

                        <% if(isCurrentUser){ %>
                            <i class="bi bi-pencil-square ms-2 text-black edit-entry-icon" role="button" data-entry-id="<%= entry._id %>"></i>
                            <i class="bi bi-trash ms-2 text-black delete-entry-icon" role="button" data-entry-id="<%= entry._id %>"></i>
                        <% } %>
                    </div>
                    <div class="d-flex flex-column gap-2">
                        <div class="position-relative flex-grow-1">
                            <a href="/profileGames/<%= profileIdentifier %>/<%= entryKey %>"
                               class="game-link d-block <%= canRate ? 'game-link-unrated' : '' %>"
                               data-entry-key="<%= entryKey %>"
                               data-entry-id="<%= entry._id %>"
                               data-game-id="<%= normalizedGameId %>"
                               data-can-rate="<%= canRate ? 'true' : 'false' %>"
                               data-away-team="<%= game.awayTeamName %>"
                               data-home-team="<%= game.homeTeamName %>"
                               data-game-date="<%= game.startDate || game.StartDate %>"
                               data-away-logo="<%= game.awayTeam && game.awayTeam.logos && game.awayTeam.logos[0] ? game.awayTeam.logos[0] : '/images/placeholder.jpg' %>"
                               data-home-logo="<%= game.homeTeam && game.homeTeam.logos && game.homeTeam.logos[0] ? game.homeTeam.logos[0] : '/images/placeholder.jpg' %>"
                               data-away-score="<%= game.AwayPoints != null ? game.AwayPoints : '' %>"
                               data-home-score="<%= game.HomePoints != null ? game.HomePoints : '' %>"
                               data-entry-elo="<%= entry.elo %>">

                                <div class="card shadow-sm h-100 game-card p-3 text-center position-relative <%= entry.checkedIn ? 'checked-in-border' : '' %>" data-away-color="<%= awayColor %>" data-home-color="<%= homeColor %>" style="background: linear-gradient(to right, <%= awayColor %>, <%= homeColor %>);">
                                    <div class="venue-overlay"><%= game.Venue || game.venue %></div>

                                    <div class="d-flex justify-content-between align-items-center position-relative mb-2 px-3">
                                        <div class="logo-wrapper me-3">
                                            <div class="team-logo-container">
                                                <img loading="lazy" src="<%= game.awayTeam && game.awayTeam.logos && game.awayTeam.logos[0] ? game.awayTeam.logos[0] : '/images/placeholder.jpg' %>" alt="<%= game.awayTeamName %>">
                                            </div>
                                            <span class="team-name"><%= game.awayTeamName %></span>
                                        </div>
                                        <div class="logo-wrapper ms-3">
                                            <div class="team-logo-container">
                                                <img loading="lazy" src="<%= game.homeTeam && game.homeTeam.logos && game.homeTeam.logos[0] ? game.homeTeam.logos[0] : '/images/placeholder.jpg' %>" alt="<%= game.homeTeamName %>">
                                            </div>
                                            <span class="team-name"><%= game.homeTeamName %></span>
                                        </div>
                                        <div class="position-absolute top-50 start-50 translate-middle fw-bold score-text text-white"><%= game.AwayPoints %> – <%= game.HomePoints %></div>
                                    </div>
                                </div>
                            </a>
                        </div>
                        <%
      const rawTargetGameId = game.gameId ?? game.Id ?? game._id ?? entry.gameId;
      const targetGameId = rawTargetGameId != null ? String(rawTargetGameId) : null;
      const followedUsers = (targetGameId && followedUsersByGame && followedUsersByGame[targetGameId]) || [];
      const displayedFollowers = followedUsers.slice(0, 4);
      const remainingFollowers = followedUsers.length - displayedFollowers.length;
    %>
                        <% if (followedUsers.length) { %>
                        <div class="followed-attendees">
                            <div class="followed-attendees-list">
                                <% displayedFollowers.forEach(function(attendee){ %>
                                    <div class="attendee-avatar text-center">
                                        <a href="/profile/<%= attendee.username %>" class="d-inline-block">
                                            <img src="<%= attendee.profileImg %>" alt="<%= attendee.username %>'s profile picture">
                                        </a>
                                        <% if (attendee.checkedIn) { %>
                                            <i class="bi bi-check-circle-fill attendee-check-icon text-gradient"></i>
                                        <% } else { %>
                                            <span class="attendee-check-placeholder"></span>
                                        <% } %>
                                    </div>
                                <% }); %>
                                <% if (remainingFollowers > 0) { %>
                                    <div class="attendee-more text-gradient">+<%= remainingFollowers %></div>
                                <% } %>
                            </div>
                        </div>
                        <% } %>
                    </div>
                </div>
            </div>
            <% }); %>
        </div>
        <% if (showTeamFilter) { %>
        <p class="text-center text-black d-none" id="noGamesFilteredMessage">No games match this team yet.</p>
        <% } %>
        <% } else { %>
        <p class="empty-tab-message text-center text-black">No games yet</p>
        <% } %>
    </div>

    <% if(isCurrentUser){ %>
    <div class="modal fade user-search-modal" id="rateGameModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <form id="rateGameForm" enctype="multipart/form-data">
                    <input type="hidden" name="entryId" id="rateEntryId">
                    <input type="hidden" name="compareGameId1" id="rateCompareGameId1">
                    <input type="hidden" name="winner1" id="rateWinner1">
                    <input type="hidden" name="compareGameId2" id="rateCompareGameId2">
                    <input type="hidden" name="winner2" id="rateWinner2">
                    <input type="hidden" name="compareGameId3" id="rateCompareGameId3">
                    <input type="hidden" name="winner3" id="rateWinner3">
                    <div class="modal-header border-0">
                        <h3 class="text-white fw-bold mb-0" id="rateModalTitle">Rate this game!</h3>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div id="rateManualSection">
                            <div class="mb-3 position-relative">
                                <label class="form-label d-flex justify-content-between">
                                    <span>Rating:</span>
                                    <span id="rateRatingValue" class="fw-bold text-white">5</span>
                                </label>
                                <div class="glass-range-wrapper">
                                    <input type="range" id="rateRatingRange" name="rating" class="form-range glass-control" min="1" max="10" step="0.1" value="5">
                                </div>
                            </div>
                        </div>
                        <div id="rateEloSection" style="display:none;">
                            <div class="mb-3">
                                <div class="d-flex justify-content-between mb-3">
                                    <div id="rateNewGameCard" class="elo-game-card flex-fill me-2"></div>
                                    <div id="rateExistingGameCard" class="elo-game-card flex-fill ms-2"></div>
                                </div>
                                <p id="rateComparisonPrompt" class="mb-2 fw-bold text-center"></p>
                                <div id="rateComparisonButtons" class="d-flex justify-content-around" style="display:none;">
                                    <button type="button" class="btn btn-primary btn-sm" id="rateBetterBtn">New Game</button>
                                    <button type="button" class="btn btn-secondary btn-sm" id="rateWorseBtn">Existing Game</button>
                                </div>
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Photo</label>
                            <input type="file" name="photo" class="form-control glass-control" id="ratePhotoInput">
                            <div id="ratePhotoPreview" class="mt-2 d-none">
                                <img src="" alt="Preview" class="img-fluid rounded">
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label d-flex justify-content-between">
                                <span>Comment</span>
                                <small id="rateCommentCounter">0/100</small>
                            </label>
                            <textarea id="rateCommentInput" class="form-control glass-control" name="comment" rows="3" maxlength="100"></textarea>
                        </div>
                        <div id="rateError" class="alert alert-danger d-none" role="alert"></div>
                    </div>
                    <div class="modal-footer border-0">
                        <button type="submit" class="btn btn-primary" id="rateSubmitBtn">Submit</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="modal fade user-search-modal" id="editGameModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <form id="editGameForm" enctype="multipart/form-data">
                    <input type="hidden" name="entryId" id="editEntryId">
                    <div class="modal-header border-0">
                        <h5 class="modal-title">Edit Game Entry</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            
                            
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Photo</label>
                            <input type="file" name="photo" class="form-control glass-control" id="editPhotoInput">
                        </div>
                        <div class="mb-3">
                            <label class="form-label d-flex justify-content-between">
                                <span>Comment</span>
                                <small id="editCommentCounter">0/100</small>
                            </label>
                            <textarea id="editCommentInput" class="form-control glass-control" name="comment" rows="3" maxlength="100"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer border-0">
                        <button type="submit" id="saveGameBtn" class="btn btn-primary">Save</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <% } %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="/js/profileModals.js"></script>
    <script>
        window.existingGameIds = <%- JSON.stringify((user.gameEntries || []).map(e => String(e.gameId))) %>;
        window.gameEntryCount = <%- (user.gameEntries || []).length %>;
        window.ratedGameEntryCount = <%- (user.gameEntries || []).reduce(function(sum, entry){ return sum + (entry && entry.elo != null ? 1 : 0); }, 0) %>;
        window.gameEntryNames = <%- JSON.stringify((gameEntries || []).map(e => {
            const g = e.game || {};
            return `${g.awayTeamName || ''} vs ${g.homeTeamName || ''}`;
        })) %>;
        window.gameEntriesData = <%- JSON.stringify(gameEntries || []) %>;
        window.eloGamesData = <%- JSON.stringify(eloGames || []) %>;
        window.profileUserId = "<%= user._id %>";
        window.loggedInUserId = "<%= viewer ? viewer._id : '' %>";
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function(){
            const teamOptions = <%- JSON.stringify(teamOptions || []) %>;
            const input = document.getElementById('teamFilterInput');
            const dropdown = document.getElementById('teamFilterDropdown');
            const optionsContainer = dropdown ? dropdown.querySelector('.team-filter-options') : null;
            const gameCards = Array.from(document.querySelectorAll('#profileGamesContainer .col'));
            const noResultsMessage = document.getElementById('noGamesFilteredMessage');

            if(!input || !dropdown || !optionsContainer || !teamOptions.length){
                return;
            }

            const normalizedTeams = teamOptions.map(function(option){
                const name = option && option.name ? option.name : '';
                return {
                    name: name,
                    logo: (option && option.logo) || '/images/placeholder.jpg',
                    key: name.toLowerCase()
                };
            });

            const escapeHtml = function(value){
                return String(value || '').replace(/[&<>"']/g, function(match){
                    switch(match){
                        case '&': return '&amp;';
                        case '<': return '&lt;';
                        case '>': return '&gt;';
                        case '"': return '&quot;';
                        case "'": return '&#39;';
                        default: return match;
                    }
                });
            };

            const normalize = function(value){
                return (value || '').toString().trim().toLowerCase();
            };

            const hideDropdown = function(){
                dropdown.classList.add('d-none');
                input.setAttribute('aria-expanded', 'false');
            };

            const showDropdown = function(){
                dropdown.classList.remove('d-none');
                input.setAttribute('aria-expanded', 'true');
            };

            const filterGames = function(teamKey){
                let visibleCount = 0;
                gameCards.forEach(function(card){
                    if(!card){
                        return;
                    }
                    if(!teamKey){
                        card.classList.remove('d-none');
                        visibleCount += 1;
                        return;
                    }
                    const home = normalize(card.dataset.homeTeamKey);
                    const away = normalize(card.dataset.awayTeamKey);
                    const match = home === teamKey || away === teamKey;
                    card.classList.toggle('d-none', !match);
                    if(match){
                        visibleCount += 1;
                    }
                });

                if(noResultsMessage){
                    if(teamKey && visibleCount === 0){
                        noResultsMessage.classList.remove('d-none');
                    } else {
                        noResultsMessage.classList.add('d-none');
                    }
                }
            };

            let currentOptions = [];

            const buildOptionElement = function(option, index){
                const optionEl = document.createElement('div');
                optionEl.className = 'team-filter-option';
                optionEl.setAttribute('role', 'option');
                optionEl.setAttribute('tabindex', '0');
                optionEl.setAttribute('data-key', option.key);
                optionEl.setAttribute('data-name', option.name);
                optionEl.innerHTML = '<img src="' + escapeHtml(option.logo) + '" class="team-option-logo" alt="' + escapeHtml(option.name) + ' logo" loading="lazy">' +
                    '<span class="team-option-name">' + escapeHtml(option.name) + '</span>';

                const selectOption = function(){
                    input.value = option.name;
                    input.dataset.selectedTeam = option.key;
                    hideDropdown();
                    filterGames(option.key);
                    input.focus();
                };

                optionEl.addEventListener('mousedown', function(event){
                    event.preventDefault();
                    selectOption();
                });

                optionEl.addEventListener('keydown', function(event){
                    if(event.key === 'Enter' || event.key === ' '){
                        event.preventDefault();
                        selectOption();
                    } else if(event.key === 'ArrowDown'){
                        event.preventDefault();
                        const next = optionEl.nextElementSibling;
                        if(next){
                            next.focus();
                        } else {
                            input.focus();
                        }
                    } else if(event.key === 'ArrowUp'){
                        event.preventDefault();
                        const prev = optionEl.previousElementSibling;
                        if(prev){
                            prev.focus();
                        } else {
                            input.focus();
                        }
                    } else if(event.key === 'Escape'){
                        hideDropdown();
                        input.focus();
                    }
                });

                return optionEl;
            };

            const renderDropdown = function(query){
                const normalizedQuery = normalize(query);
                currentOptions = normalizedTeams.filter(function(option){
                    return !normalizedQuery || option.key.indexOf(normalizedQuery) !== -1;
                });

                optionsContainer.innerHTML = '';

                if(!currentOptions.length){
                    hideDropdown();
                    return;
                }

                currentOptions.forEach(function(option, index){
                    optionsContainer.appendChild(buildOptionElement(option, index));
                });

                showDropdown();
            };

            const resetFilter = function(){
                delete input.dataset.selectedTeam;
                filterGames('');
            };

            input.addEventListener('focus', function(){
                renderDropdown(input.value);
            });

            input.addEventListener('input', function(event){
                const value = event.target.value;
                renderDropdown(value);

                const matching = normalizedTeams.find(function(option){
                    return option.key === normalize(value);
                });

                if(matching){
                    input.dataset.selectedTeam = matching.key;
                    filterGames(matching.key);
                } else if(!value){
                    resetFilter();
                } else {
                    delete input.dataset.selectedTeam;
                    filterGames('');
                }
            });

            input.addEventListener('keydown', function(event){
                if(event.key === 'ArrowDown'){
                    if(dropdown.classList.contains('d-none')){
                        renderDropdown(input.value);
                    }
                    const firstOption = optionsContainer.querySelector('.team-filter-option');
                    if(firstOption){
                        event.preventDefault();
                        firstOption.focus();
                    }
                } else if(event.key === 'Enter'){
                    const value = input.value;
                    const matching = normalizedTeams.find(function(option){
                        return option.key === normalize(value);
                    });
                    if(!matching && currentOptions.length){
                        event.preventDefault();
                        input.value = currentOptions[0].name;
                        input.dataset.selectedTeam = currentOptions[0].key;
                        hideDropdown();
                        filterGames(currentOptions[0].key);
                    } else if(matching){
                        hideDropdown();
                        filterGames(matching.key);
                    }
                } else if(event.key === 'Escape'){
                    hideDropdown();
                }
            });

            input.addEventListener('blur', function(){
                window.setTimeout(function(){
                    if(!dropdown.contains(document.activeElement)){
                        hideDropdown();
                    }
                    const selectedKey = input.dataset.selectedTeam;
                    if(selectedKey){
                        filterGames(selectedKey);
                    } else if(!input.value){
                        resetFilter();
                    }
                }, 100);
            });

            document.addEventListener('click', function(event){
                if(!event.target.closest('.team-filter-wrapper')){
                    hideDropdown();
                }
            });

            filterGames('');
        });
    </script>
    <script src="/js/addGameModal.js"></script>
    <script src="/js/editGameModal.js"></script>
    <script src="/js/rateGameModal.js"></script>
    <script>
        const followBtn = document.getElementById('followBtn');
        if(followBtn){
            followBtn.addEventListener('click', async function(){
                const targetId = this.dataset.user;
                const isFollowing = this.classList.contains('btn-secondary');
                const action = isFollowing ? 'unfollow' : 'follow';
                this.disabled = true;
                try {
                    const res = await fetch(`/users/${targetId}/${action}`, { method: 'POST' });
                    if(!res.ok) throw new Error();
                    const countEl = document.querySelector('#followersCount');
                    if(isFollowing){
                        this.classList.remove('btn-secondary');
                        this.classList.add('btn-primary');
                        this.textContent = 'Follow';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) - 1;
                    } else {
                        this.classList.remove('btn-primary');
                        this.classList.add('btn-secondary');
                        this.textContent = 'Following';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) + 1;
                    }
                } catch (err) {
                    alert('Action failed');
                } finally {
                    this.disabled = false;
                }
            });
        }
        const wrapper = document.querySelector('.profile-avatar-wrapper');
        if(wrapper){
            const logos = wrapper.querySelectorAll('.chain-logo');
            if(logos.length){
                const radius = wrapper.offsetWidth * 0.6;
                const centerX = wrapper.offsetWidth / 2;
                const centerY = wrapper.offsetHeight / 2;
                const angleStep = Math.PI / (logos.length + 1);
                logos.forEach((logo, idx) => {
                    const angle = Math.PI - angleStep * (idx + 1);
                    const x = centerX + radius * Math.cos(angle) - logo.offsetWidth / 2;
                    const y = centerY + radius * Math.sin(angle) - logo.offsetHeight / 2;
                    logo.style.left = x + 'px';
                    logo.style.top = y + 'px';
                });
            }
        }
        

        function hexToRgb(hex){
            if(!hex) return [255,255,255];
            hex = hex.replace('#','');
            if(hex.length===3) hex = hex.split('').map(c=>c+c).join('');
            const num = parseInt(hex,16);
            return [(num>>16)&255,(num>>8)&255,num&255];
        }
        function luminance(r,g,b){
            const a=[r,g,b].map(v=>{ v/=255; return v<=0.03928 ? v/12.92 : Math.pow((v+0.055)/1.055,2.4); });
            return 0.2126*a[0] + 0.7152*a[1] + 0.0722*a[2];
        }
        function chooseTextColor(colors){
            const lums = colors.map(c=>{ const [r,g,b]=hexToRgb(c); return luminance(r,g,b); });
            const avg = lums.reduce((a,b)=>a+b,0)/lums.length;
            return avg > 0.5 ? '#333333' : '#ffffff';
        }
        document.querySelectorAll('#profileGamesContainer .game-card').forEach(card=>{
            const away=card.dataset.awayColor; const home=card.dataset.homeColor;
            const color=chooseTextColor([away,home]);
            card.querySelectorAll('.team-name, .score-text, .text-white').forEach(e=>{e.style.color=color;});
        });

        const initTooltips = () => {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            tooltipTriggerList.map(el => new bootstrap.Tooltip(el));
        };

        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', initTooltips);
        } else {
            initTooltips();
        }
    </script>
</body>
</html>
