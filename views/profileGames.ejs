<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - Games</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/custom.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        .profile-header { background: linear-gradient(to right, #7e22ce, #14b8a6); }
        .trophy-panel { background-color: rgba(255,255,255,0.15); }
        .follow-btn { transition: background-color 0.3s, color 0.3s; }
        .avatar { border-radius: 50%; object-fit: cover; border: 2px solid rgba(255, 255, 255, 0.8); display: inline-block; }
        .profile-avatar { display: block; margin-left: auto; margin-right: auto; }
        .profile-search.form-control { background-color: rgba(255, 255, 255, 0.2) !important; border: 1px solid #ccc !important; color: #fff !important; border-radius: 8px !important; padding: 0.5rem 1rem !important; font-family: inherit !important; font-weight: bold !important; font-size: 1.1rem !important; }
        .profile-search.form-control::placeholder { color: rgba(255, 255, 255, 0.7) !important; font-style: italic; }
        .profile-search.form-control:focus { outline: none !important; box-shadow: 0 0 0 3px rgba(204, 204, 204, 0.5) !important; border-color: #bbb !important; }
        .user-search-modal .modal-content { background: linear-gradient(to right, #7e22ce, #14b8a6); background-clip: padding-box; border-radius: 1rem; border: 1px solid rgba(255, 255, 255, 0.2); box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3); color: #fff; backdrop-filter: blur(10px); font-family: inherit; }
        .user-search-modal .modal-title { font-family: inherit; font-weight: bold; font-size: 1.5rem; color: #fff; }
        .user-search-modal .btn-close { filter: invert(1); }
        .user-search-modal .profile-search.form-control { background-color: rgba(255, 255, 255, 0.2) !important; border: 1px solid #ccc !important; color: #fff !important; font-family: inherit !important; font-weight: bold !important; font-size: 1.1rem !important; border-radius: 8px !important; padding: 0.5rem 1rem 0.5rem 2.5rem !important; transition: box-shadow 0.2s ease, border-color 0.2s ease; }
        .user-search-modal .profile-search.form-control::placeholder { color: rgba(255, 255, 255, 0.7) !important; font-style: italic; }
        .user-search-modal .profile-search.form-control:focus { outline: none !important; box-shadow: 0 0 0 3px rgba(204, 204, 204, 0.5) !important; border-color: #bbb !important; }
        @media (min-width: 768px) { .profile-avatar { margin-left: 0; margin-right: 0; } }
        .avatar-lg { width: clamp(80px, 20vw, 300px); height: clamp(80px, 20vw, 300px); }
        .avatar-sm { width: clamp(40px, 10vw, 60px); height: clamp(40px, 10vw, 60px); }
    </style>
</head>
<body class="d-flex flex-column min-vh-100">
    <%- include('partials/header') %>
    <%- include('partials/profileHeader', { user, isCurrentUser, isFollowing, canMessage, viewer, activeTab: 'games' }) %>
    <div class="container my-4 flex-grow-1">
        <div class="info-banner d-flex flex-wrap align-items-center justify-content-between mb-3">
            <div class="d-flex align-items-center flex-grow-1 mb-2 mb-md-0">
                <i class="bi bi-info-circle fs-5 me-2"></i>
                <span style="font-size: 12px">Press the +Game button to add a game from the past. Games added from the past will contribute toward stats but not toward badges and rankings.</span>
            </div>
        </div>
        <% if (gameEntries && gameEntries.length > 0) { %>
        <div class="row row-cols-1 row-cols-md-1 row-cols-lg-1 g-4 " id="profileGamesContainer">
            <% gameEntries.forEach(function(entry){
                 const game = entry.game;
                 if(!game){ return; }
                 const awayColor = game.awayTeam && game.awayTeam.color ? game.awayTeam.color : '#ffffff';
                 const homeColor = game.homeTeam && game.homeTeam.color ? game.homeTeam.color : '#ffffff'; %>
            <div class="col">
                <div class="game-date-banner text-center mb-1"><%= (game.startDate || game.StartDate).toISOString().split('T')[0] %></div>
                <div class="position-relative">
                    <a href="/games/<%= game._id %>" class="game-link d-block">
                        <div class="card shadow-sm h-100 game-card p-3 text-center position-relative" data-away-color="<%= awayColor %>" data-home-color="<%= homeColor %>" style="background: linear-gradient(to right, <%= awayColor %>, <%= homeColor %>);">
                            <div class="d-flex justify-content-between align-items-center position-relative mb-2 px-3">
                                <div class="logo-wrapper me-3">
                                    <div class="team-logo-container">
                                        <img loading="lazy" src="<%= game.awayTeam && game.awayTeam.logos && game.awayTeam.logos[0] ? game.awayTeam.logos[0] : '/images/placeholder.jpg' %>" alt="<%= game.awayTeamName %>">
                                    </div>
                                    <span class="team-name"><%= game.awayTeamName %></span>
                                </div>
                                <div class="logo-wrapper ms-3">
                                    <div class="team-logo-container">
                                        <img loading="lazy" src="<%= game.homeTeam && game.homeTeam.logos && game.homeTeam.logos[0] ? game.homeTeam.logos[0] : '/images/placeholder.jpg' %>" alt="<%= game.homeTeamName %>">
                                    </div>
                                    <span class="team-name"><%= game.homeTeamName %></span>
                                </div>
                                <div class="position-absolute top-50 start-50 translate-middle fw-bold score-text text-white"><%= game.AwayPoints %> â€“ <%= game.HomePoints %></div>
                            </div>
                            <% if(entry.rating){ %>
                                <div class="mt-2 text-center text-white">Rated: <%= entry.rating %>/10</div>
                            <% } %>
                        </div>
                    </a>
                </div>
            </div>
            <% }); %>
        </div>
        <% } else { %>
        <p class="empty-tab-message text-center text-black">No games yet</p>
        <% } %>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        const searchInput = document.getElementById('searchInput');
        const resultsEl = document.getElementById('searchResults');
        const followBtn = document.getElementById('followBtn');
        const userSearchModal = document.getElementById('userSearchModal');
        if(followBtn){
            followBtn.addEventListener('click', async function(){
                const targetId = this.dataset.user;
                const isFollowing = this.classList.contains('btn-secondary');
                const action = isFollowing ? 'unfollow' : 'follow';
                this.disabled = true;
                try {
                    const res = await fetch(`/users/${targetId}/${action}`, { method: 'POST' });
                    if(!res.ok) throw new Error();
                    const countEl = document.querySelector('#followersCount');
                    if(isFollowing){
                        this.classList.remove('btn-secondary');
                        this.classList.add('btn-primary');
                        this.textContent = 'Follow';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) - 1;
                    } else {
                        this.classList.remove('btn-primary');
                        this.classList.add('btn-secondary');
                        this.textContent = 'Following';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) + 1;
                    }
                } catch (err) {
                    alert('Action failed');
                } finally {
                    this.disabled = false;
                }
            });
        }
        if(searchInput){
            searchInput.addEventListener('input', async function(){
                const q = this.value.trim();
                if(!q){ resultsEl.innerHTML=''; return; }
                const res = await fetch('/users/search?q='+encodeURIComponent(q));
                if(!res.ok) return;
                const data = await res.json();
                const currentId = '<%= viewer ? viewer.id : "" %>';
                resultsEl.innerHTML = data.map(u=>{
                    const following = u.followers && u.followers.includes(currentId);
                    const imgUrl = `/users/${u._id}/profile-image`;
                    return `<div class="col-md-4"><div class="card p-2 d-flex flex-row align-items-center gap-2">`+
                        `<img src="${imgUrl}" class="avatar avatar-sm">`+
                        `<div class="flex-grow-1"><a href="/users/${u._id}" class="text-decoration-none">${u.username}</a></div>`+
                        (currentId && u._id !== currentId ? `<button data-id="${u._id}" class="btn btn-${following?'secondary':'primary'} btn-sm follow-toggle">${following?'Following':'Follow'}</button>`:'')+
                        `</div></div>`; }).join('');
            });
            resultsEl.addEventListener('click', async function(e){
                const btn = e.target.closest('.follow-toggle');
                if(!btn) return;
                const targetId = btn.dataset.id;
                const isFollowing = btn.classList.contains('btn-secondary');
                const action = isFollowing ? 'unfollow' : 'follow';
                btn.disabled = true;
                try{
                    const res = await fetch(`/users/${targetId}/${action}`, {method:'POST'});
                    if(!res.ok) throw new Error();
                    if(isFollowing){
                        btn.classList.remove('btn-secondary');
                        btn.classList.add('btn-primary');
                        btn.textContent = 'Follow';
                    }else{
                        btn.classList.remove('btn-primary');
                        btn.classList.add('btn-secondary');
                        btn.textContent = 'Following';
                    }
                }catch(err){
                    alert('Action failed');
                }finally{
                    btn.disabled = false;
                }
            });
        }
        if(userSearchModal){
            userSearchModal.addEventListener('hidden.bs.modal', () => {
                if(searchInput){
                    searchInput.value = '';
                    resultsEl.innerHTML = '';
                }
            });
        }
        const wrapper = document.querySelector('.profile-avatar-wrapper');
        if(wrapper){
            const logos = wrapper.querySelectorAll('.chain-logo');
            if(logos.length){
                const radius = wrapper.offsetWidth * 0.6;
                const centerX = wrapper.offsetWidth / 2;
                const centerY = wrapper.offsetHeight / 2;
                const angleStep = Math.PI / (logos.length + 1);
                logos.forEach((logo, idx) => {
                    const angle = Math.PI - angleStep * (idx + 1);
                    const x = centerX + radius * Math.cos(angle) - logo.offsetWidth / 2;
                    const y = centerY + radius * Math.sin(angle) - logo.offsetHeight / 2;
                    logo.style.left = x + 'px';
                    logo.style.top = y + 'px';
                });
            }
        }
        const addGameBtn = document.getElementById('addGameBtn');
        if(addGameBtn){
            addGameBtn.addEventListener('click', () => {
                const modalEl = document.getElementById('addGameModal');
                if(modalEl){
                    bootstrap.Modal.getOrCreateInstance(modalEl).show();
                }
            });
        }
        const openUserModalBtn = document.getElementById('openUserModal');
        if(openUserModalBtn){
            openUserModalBtn.addEventListener('click', () => {
                const modalEl = document.getElementById('userSearchModal');
                if(modalEl){
                    bootstrap.Modal.getOrCreateInstance(modalEl).show();
                }
            });
        }
        $(function(){
            const gameSelect = $('#gameSelect');
            function formatGame(option){
                if(!option.id) return option.text;
                const homeLogo = option.homeLogo || '/images/placeholder.jpg';
                const awayLogo = option.awayLogo || '/images/placeholder.jpg';
                return $(
                    `<div class="d-flex align-items-center">`+
                    `<img src="${homeLogo}" style="width:30px;height:30px;border-radius:50%;" class="me-2">`+
                    `<span>${option.homeTeamName}</span>`+
                    `<span class="mx-1">vs</span>`+
                    `<span>${option.awayTeamName}</span>`+
                    `<img src="${awayLogo}" style="width:30px;height:30px;border-radius:50%;" class="ms-2">`+
                    `<span class="ms-2 text-muted">(${option.score})</span>`+
                    `</div>`
                );
            }
            gameSelect.select2({
                dropdownParent: $('#addGameModal'),
                placeholder:'Search game',
                width:'100%',
                templateResult: formatGame,
                templateSelection: formatGame,
                ajax:{
                    url:'/pastGames/search',
                    dataType:'json',
                    delay:250,
                    data:function(params){ return { q: params.term, season: $('#seasonSelect').val() }; },
                    processResults:function(data){
                        return { results: data.map(g=>({
                            id:g.id,
                            homeTeamName:g.homeTeamName,
                            awayTeamName:g.awayTeamName,
                            homeLogo:g.homeLogo,
                            awayLogo:g.awayLogo,
                            score:g.score,
                            text:`${g.homeTeamName} vs ${g.awayTeamName}`
                        })) };
                    }
                }
            });
            $('#addGameModal').on('shown.bs.modal', function(){
                if(!$('#seasonSelect option').length){
                    fetch('/pastGames/seasons').then(r=>r.json()).then(data=>{
                        const opts = data.map(s=>`<option value="${s}">${s}</option>`).join('');
                        $('#seasonSelect').append('<option value="">Select season</option>'+opts);
                    });
                }
            });
            $('#seasonSelect').on('change', function(){
                const val = $(this).val();
                gameSelect.prop('disabled', !val).val(null).trigger('change');
            });
        });
        const ratingRange=document.getElementById('ratingRange');
        const ratingValue=document.getElementById('ratingValue');
        if(ratingRange){
            ratingValue.textContent=ratingRange.value;
            ratingRange.addEventListener('input',()=>{ratingValue.textContent=ratingRange.value;});
        }

        function hexToRgb(hex){
            if(!hex) return [255,255,255];
            hex = hex.replace('#','');
            if(hex.length===3) hex = hex.split('').map(c=>c+c).join('');
            const num = parseInt(hex,16);
            return [(num>>16)&255,(num>>8)&255,num&255];
        }
        function luminance(r,g,b){
            const a=[r,g,b].map(v=>{ v/=255; return v<=0.03928 ? v/12.92 : Math.pow((v+0.055)/1.055,2.4); });
            return 0.2126*a[0] + 0.7152*a[1] + 0.0722*a[2];
        }
        function chooseTextColor(colors){
            const lums = colors.map(c=>{ const [r,g,b]=hexToRgb(c); return luminance(r,g,b); });
            const avg = lums.reduce((a,b)=>a+b,0)/lums.length;
            return avg > 0.5 ? '#333333' : '#ffffff';
        }
        document.querySelectorAll('#profileGamesContainer .game-card').forEach(card=>{
            const away=card.dataset.awayColor; const home=card.dataset.homeColor;
            const color=chooseTextColor([away,home]);
            card.querySelectorAll('.team-name, .score-text, .text-white').forEach(e=>{e.style.color=color;});
        });
    </script>
</body>
</html>
