<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Games</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="/css/custom.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
</head>
<body class="d-flex flex-column min-vh-100 gradient-bg">
  <%- include('partials/header') %>

  <div class="container my-4 flex-grow-1">
    <div class="row g-3 mb-4 position-relative" id="filtersForm">
      <div class="col-sm-5 position-relative">
        <input id="teamInput" type="text" class="form-control glass-control" placeholder="Search by team" autocomplete="off" value="<%= filters.team || '' %>">
        <input type="hidden" id="teamId" value="<%= filters.teamId || '' %>">
        <div id="teamSuggestions" class="list-group team-suggestions"></div>
      </div>
      <div class="col-sm-5 d-flex align-items-center">
        <button type="button" id="dateBtn" class="btn glass-control d-flex align-items-center"><i class="bi bi-calendar3"></i><span id="dateDisplay" class="ms-2"></span></button>
        <input type="hidden" id="dateInput" value="<%= filters.date || '' %>">
      </div>
      <div class="col-sm-2 d-flex justify-content-end">
        <button type="button" id="clearFilters" class="btn btn-sm btn-outline-light">Clear Filters</button>
      </div>
      <input type="hidden" id="latInput" value="<%= filters.lat || '' %>">
      <input type="hidden" id="lngInput" value="<%= filters.lng || '' %>">
    </div>

  <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4" id="gamesContainer">
      <% games.forEach(function(game){
           const awayColor = game.awayTeam && game.awayTeam.color ? game.awayTeam.color : '#ffffff';
           const homeColor = game.homeTeam && game.homeTeam.color ? game.homeTeam.color : '#ffffff';
      %>
      <div class="col" data-id="<%= game._id %>" data-distance="<%= typeof game.distance === 'number' ? game.distance.toFixed(1) : '' %>" data-start="<%= game.startDate.toISOString() %>">
        <a href="/games/<%= game._id %>" class="game-link d-block">
          <div class="card shadow-sm h-100 game-card p-3 text-center position-relative" data-away-color="<%= awayColor %>" data-home-color="<%= homeColor %>" style="background: linear-gradient(to right, <%= awayColor %>, <%= homeColor %>);">
            <div class="wishlist-btn position-absolute"><i class="bi <%= game.isWishlisted ? 'bi-heart-fill' : 'bi-heart' %>"></i></div>
            <div class="followers-col d-flex flex-column align-items-center">
            <% if(game.followedWishers && game.followedWishers.length){ const extra = game.followedWishers.length - 4; game.followedWishers.slice(0,4).forEach(function(u){ %>
              <a href="/users/<%= u._id %>" class="follower-avatar" title="<%= u.username %>" onclick="event.stopPropagation();">
                <img src="<%= u.uploadedPic ? ('/uploads/profilePics/' + u.uploadedPic) : (u.profileImage || 'https://via.placeholder.com/30') %>" class="avatar avatar-sm">
              </a>
            <% }); if(extra>0){ %>
              <div class="more-followers">+<%= extra %></div>
            <% } } %>
            </div>
              <div class="game-date mb-2" data-start="<%= game.startDate.toISOString() %>"></div>
              <div class="d-flex justify-content-between align-items-center position-relative mb-2 px-3">
                <div class="logo-wrapper me-3">
                  <div class="team-logo-container">
                    <img loading="lazy" src="<%= game.awayTeam && game.awayTeam.logos && game.awayTeam.logos[0] ? game.awayTeam.logos[0] : 'https://via.placeholder.com/60' %>" alt="<%= game.awayTeamName %>">
                  </div>
                  <span class="team-name"><%= game.awayTeamName %></span>
                </div>
                <div class="logo-wrapper ms-3">
                  <div class="team-logo-container">
                    <img loading="lazy" src="<%= game.homeTeam && game.homeTeam.logos && game.homeTeam.logos[0] ? game.homeTeam.logos[0] : 'https://via.placeholder.com/60' %>" alt="<%= game.homeTeamName %>">
                  </div>
                  <span class="team-name"><%= game.homeTeamName %></span>
                </div>
                <div class="position-absolute top-50 start-50 translate-middle fw-bold fs-4 at-symbol">@</div>
              </div>
              <% if(typeof game.distance === 'number'){ %>
                <span class="badge bg-success near-badge"><%= game.distance.toFixed(0) %> mi</span>
              <% } %>
              </div>
            </a>
        </div>
      <% }); %>
    </div>
  </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
    <script>
      function formatDates(){
        document.querySelectorAll('.game-date[data-start]').forEach(function(el){
          var date = new Date(el.dataset.start);
          el.textContent = new Intl.DateTimeFormat(navigator.language, { dateStyle: 'medium', timeStyle: 'short' }).format(date);
        });
      }

      function hexToRgb(hex){
        if(!hex) return [255,255,255];
        hex = hex.replace('#','');
        if(hex.length===3) hex = hex.split('').map(c=>c+c).join('');
        const num = parseInt(hex,16);
        return [(num>>16)&255,(num>>8)&255,num&255];
      }

      function luminance(r,g,b){
        const a=[r,g,b].map(v=>{
          v/=255;
          return v<=0.03928 ? v/12.92 : Math.pow((v+0.055)/1.055,2.4);
        });
        return 0.2126*a[0] + 0.7152*a[1] + 0.0722*a[2];
      }

      function chooseTextColor(colors){
        const lums = colors.map(c=>{
          const [r,g,b] = hexToRgb(c);
          return luminance(r,g,b);
        });
        const avg = lums.reduce((a,b)=>a+b,0)/lums.length;
        return avg > 0.5 ? '#333333' : '#ffffff';
      }

      function applyTextColors(){
        document.querySelectorAll('.game-card').forEach(card=>{
          const away = card.dataset.awayColor;
          const home = card.dataset.homeColor;
          const textColor = chooseTextColor([away, home]);
          card.querySelectorAll('.game-date, .team-name').forEach(el=>{
            el.style.color = textColor;
          });
        });
      }

      formatDates();
      applyTextColors();

      const GEO_KEY = 'userCoords';
      const latInput = document.getElementById('latInput');
      const lngInput = document.getElementById('lngInput');

      function getCached(){
        try{
          const data = JSON.parse(localStorage.getItem(GEO_KEY));
          if(!data) return null;
          if(Date.now() - data.t > 30*60*1000) return null;
          return data;
        }catch(e){ return null; }
      }

      function saveCoords(lat,lng){
        localStorage.setItem(GEO_KEY, JSON.stringify({lat,lng,t:Date.now()}));
        if(window.loggedInUser){
          fetch('/profile/location',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({latitude:lat, longitude:lng})});
        }
      }

      async function ensureCoords(){
        let c = getCached();
        if(c) return c;
        if(!navigator.geolocation) return null;
        return new Promise(res=>{
          navigator.geolocation.getCurrentPosition(p=>{
            c = {lat:p.coords.latitude,lng:p.coords.longitude};
            saveCoords(c.lat,c.lng);
            res(c);
          }, ()=>res(null));
        });
      }

      const container = document.getElementById('gamesContainer');
      const teamIdInput = document.getElementById('teamId');
      const teamInput = document.getElementById('teamInput');
      const suggestions = document.getElementById('teamSuggestions');
      const dateInput = document.getElementById('dateInput');
      const dateDisplay = document.getElementById('dateDisplay');
      const dateBtn = document.getElementById('dateBtn');
      const clearBtn = document.getElementById('clearFilters');

      const fp = flatpickr(dateBtn, {
        defaultDate: dateInput.value || null,
        onChange: (selected)=>{
          dateInput.value = selected[0] ? selected[0].toISOString().split('T')[0] : '';
          dateDisplay.textContent = selected[0] ? selected[0].toLocaleDateString() : '';
          applyFilters();
        }
      });
      if(dateInput.value){
        dateDisplay.textContent = new Date(dateInput.value).toLocaleDateString();
      }

      if(teamInput){
        teamInput.addEventListener('input', async function(){
          teamIdInput.value = '';
          const q = this.value.trim();
          if(!q){ suggestions.innerHTML=''; applyFilters(); return; }
          const res = await fetch('/teams/search?q='+encodeURIComponent(q));
          if(!res.ok) return;
          const data = await res.json();
          suggestions.innerHTML = data.map(t=>`<button type="button" class="list-group-item list-group-item-action d-flex align-items-center" data-name="${t.school}" data-id="${t._id}">`+
            `<img src="${t.logos && t.logos[0] ? t.logos[0] : 'https://via.placeholder.com/30'}">`+
            `${t.school}</button>`).join('');
        });

        suggestions.addEventListener('click', function(e){
          const btn = e.target.closest('button[data-name]');
          if(!btn) return;
          const name = btn.getAttribute('data-name');
          const id = btn.getAttribute('data-id');
          teamInput.value = name;
          teamIdInput.value = id;
          suggestions.innerHTML='';
          applyFilters();
        });
      }

      clearBtn.addEventListener('click', () => {
        teamInput.value = '';
        teamIdInput.value = '';
        dateInput.value = '';
        dateDisplay.textContent = '';
        fp.clear();
        applyFilters();
      });

      async function applyFilters(){
        const params = new URLSearchParams();
        if(teamIdInput.value){
          params.set('teamId', teamIdInput.value);
          params.set('team', teamInput.value);
        }
        if(dateInput.value) params.set('date', dateInput.value);
        if(latInput.value && lngInput.value){
          params.set('lat', latInput.value);
          params.set('lng', lngInput.value);
        }
        const url = '/games?' + params.toString();
        const res = await fetch(url);
        if(!res.ok) return;
        const html = await res.text();
        const doc = new DOMParser().parseFromString(html,'text/html');
        const newContainer = doc.getElementById('gamesContainer');
        container.classList.add('fading');
        setTimeout(()=>{
          container.innerHTML = newContainer.innerHTML;
          container.classList.remove('fading');
          formatDates();
          applyTextColors();
          attachWishlistHandlers();
        },150);
        history.replaceState(null,'',url);
      }

      ensureCoords().then(coords=>{
        if(coords){
          latInput.value = coords.lat;
          lngInput.value = coords.lng;
        }
        applyFilters();
      });

      function attachWishlistHandlers(){
        document.querySelectorAll('.wishlist-btn').forEach(btn=>{
          const icon = btn.querySelector('i');
          btn.dataset.saved = icon.classList.contains('bi-heart-fill') ? '1' : '0';
          btn.addEventListener('mouseenter', ()=>{
            if(btn.dataset.saved==='0'){
              icon.classList.remove('bi-heart');
              icon.classList.add('bi-heart-fill');
            }
          });
          btn.addEventListener('mouseleave', ()=>{
            if(btn.dataset.saved==='0'){
              icon.classList.add('bi-heart');
              icon.classList.remove('bi-heart-fill');
            }
          });
          btn.addEventListener('click',async function(e){
            e.preventDefault();
            e.stopPropagation();
            const col = btn.closest('.col');
            const gameId = col.dataset.id;
            const res = await fetch(`/games/${gameId}/wishlist`,{method:'POST'});
            if(!res.ok) return;
            const data = await res.json();
            icon.className = data.action==='added' ? 'bi bi-heart-fill' : 'bi bi-heart';
            btn.dataset.saved = data.action==='added' ? '1' : '0';
          });
        });
      }

      attachWishlistHandlers();

    </script>
</body>
</html>
