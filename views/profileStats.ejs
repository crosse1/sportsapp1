<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - Stats</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/custom.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/topojson-client@3/dist/topojson-client.min.js"></script>
    <style>

        #gamesModal, #teamsModal, #statesModal { color: #fff; }
        #gamesModal .gradient-text,
        #teamsModal .gradient-text,
        #statesModal .gradient-text,
        #gamesModal .top-list-item,
        #gamesModal .venue-name-text,
        #gamesModal .venue-count,
        #teamsModal .top-list-item,
        #teamsModal .venue-name-text,
        #teamsModal .venue-count,
        #statesModal .top-list-item,
        #statesModal .venue-name-text,
        #statesModal .venue-count {
            background: none !important;
            -webkit-background-clip: initial !important;
            -webkit-text-fill-color: #fff !important;
            color: #fff !important;
        }

        #gamesModal .modal-header {
            align-items: center;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        #gamesModal .games-header-stack {
            flex: 1 1 auto;
            display: flex;
            align-items: center;
            gap: 0.75rem;
            flex-wrap: wrap;
        }

        .games-toggle-wrapper {
            margin-left: auto;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            padding: 0.15rem 0.35rem;
            border-radius: 999px;
            backdrop-filter: blur(10px);
            background-color: rgba(255, 255, 255, 0.06);
        }

        .games-toggle {
            position: relative;
            width: 56px;
            height: 28px;
            border-radius: 999px;
            padding: 2px;
            cursor: pointer;
            background: rgba(255, 255, 255, 0.18);
            backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.25);
            box-shadow: 0 12px 24px rgba(15, 23, 42, 0.25);
            display: inline-flex;
            align-items: center;
            transition: box-shadow 0.3s ease, background 0.3s ease;
        }

        .games-toggle:hover {
            box-shadow: 0 16px 30px rgba(15, 23, 42, 0.3);
        }

        .games-toggle input {
            position: absolute;
            opacity: 0;
            pointer-events: none;
        }

        .games-toggle .toggle-track {
            position: absolute;
            inset: 0;
            border-radius: inherit;
            background: linear-gradient(135deg, rgba(20, 184, 166, 0.25), rgba(126, 34, 206, 0.25));
            transition: background 0.3s ease, opacity 0.3s ease;
        }

        .games-toggle .toggle-thumb {
            position: relative;
            width: 24px;
            height: 24px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.85);
            box-shadow: 0 6px 14px rgba(15, 23, 42, 0.3);
            transform: translateX(0);
            transition: transform 0.35s ease, background 0.35s ease;
        }

        .games-toggle input:checked ~ .toggle-track {
            background: linear-gradient(135deg, rgba(20, 184, 166, 0.85), rgba(126, 34, 206, 0.85));
        }

        .games-toggle input:checked ~ .toggle-thumb {
            transform: translateX(28px);
            background: rgba(255, 255, 255, 0.95);
        }

        .games-toggle-option {
            font-size: 0.85rem;
            font-weight: 600;
            color: rgba(255, 255, 255, 0.65);
            transition: opacity 0.3s ease, color 0.3s ease;
            white-space: nowrap;
        }

        .games-toggle-option.active {
            opacity: 1;
            color: transparent;
            background: linear-gradient(135deg, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        #gamesModalBody {
            transition: opacity 0.4s ease, transform 0.4s ease;
        }

        #gamesModalBody.is-sorting {
            opacity: 0;
            transform: translateY(12px);
        }

        #gamesModalBody.is-sorted {
            opacity: 1;
            transform: translateY(0);
        }

        #venuesModal .modal-content {
            background: #fff;
            color: #000;
        }

        #venuesModal .modal-title {
            background: linear-gradient(to right, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        #venuesModal .btn-close {
            filter: invert(0);
        }

        #venuesModal .modal-dialog {
            max-width: 900px;
            width: 90%;
        }

        #statesModal .modal-dialog {
            max-width: min(1100px, 95vw);
        }

        .states-modal-body {
            padding: 0.5rem 0;
        }

        .states-modal-layout {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        @media (min-width: 992px) {
            .states-modal-layout {
                flex-direction: row;
            }
            .states-modal-map-column {
                flex: 3;
            }
            .states-modal-list-column {
                flex: 2;
            }
        }

        .states-modal-list-title {
            letter-spacing: 0.08em;
        }

        #statesModalBody {
            display: grid;
            grid-template-columns: auto 1fr auto;
            row-gap: 0.5rem;
            column-gap: 0.5rem;
            align-items: center;
        }

        .states-modal-list {
            max-height: clamp(200px, 45vh, 420px);
            overflow-y: auto;
            padding-right: 0.35rem;
        }

        .states-map-container {
            position: relative;
            width: 100%;
            padding-top: 65%;
            border-radius: 1.25rem;
            overflow: hidden;
            background: linear-gradient(135deg, rgba(15, 23, 42, 0.65), rgba(55, 65, 81, 0.55));
            border: 1px solid rgba(255, 255, 255, 0.18);
            box-shadow: 0 24px 48px rgba(15, 23, 42, 0.45);
            backdrop-filter: blur(18px);
            -webkit-backdrop-filter: blur(18px);
        }

        .states-map-container svg {
            position: absolute;
            inset: 0;
            width: 100%;
            height: 100%;
        }

        .states-map-icon-layer {
            position: absolute;
            inset: 0;
            pointer-events: none;
        }

        .state-venue-icon {
            position: absolute;
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            border: 2px solid rgba(255, 255, 255, 0.9);
            box-shadow: 0 6px 16px rgba(15, 23, 42, 0.35);
            pointer-events: none;
        }

        .states-map-tooltip {
            position: absolute;
            padding: 0.4rem 0.8rem;
            font-size: 0.85rem;
            font-weight: 600;
            color: #fff;
            border-radius: 999px;
            background: rgba(15, 23, 42, 0.92);
            border: 1px solid transparent;
            border-image: linear-gradient(135deg, #14b8a6, #7e22ce) 1;
            box-shadow: 0 12px 28px rgba(15, 23, 42, 0.45);
            pointer-events: none;
            z-index: 2;
        }

        .states-modal-empty {
            padding: 0.75rem;
            border-radius: 0.85rem;
            background: rgba(255, 255, 255, 0.06);
            border: 1px dashed rgba(255, 255, 255, 0.2);
        }

        @media (max-width: 576px) {
            #statesModalBody {
                grid-template-columns: auto 1fr;
                row-gap: 0.4rem;
            }
            #statesModalBody .venue-count {
                grid-column: span 2;
                justify-self: end;
            }
        }

        .venue-name-text {
    font-size: 0.7rem; /* Or even 0.95rem if you need it tighter */
    font-weight: 600;
    max-width: 10rem;
    
    
}


        #statesModal .venue-name-text {
            font-size: 1.75rem;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
        }

        .stat-block {
            position: relative;
            overflow: hidden;
            border-radius: 1rem;
            
            background-color: rgba(255,255,255,0.15);
            backdrop-filter: blur(8px);
            display: flex;
            flex-direction: column;
            min-height: 12rem;
        }
        .stat-block::before {
            content: '';
            position: absolute;
            inset: 0;
            padding: 2px;
            border-radius: 1rem;
            background: linear-gradient(45deg,#14b8a6,#7e22ce);
            -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            -webkit-mask-composite: xor;
            mask-composite: exclude;
            pointer-events: none;
        }

        .stat-block::after {
  content: '';
  position: absolute;
  top: 0;
  bottom: 0;
  left: 50%;
  width: 2px;
  transform: translateX(-50%);
  background: linear-gradient(to bottom, #14b8a6, #7e22ce);
  z-index: 1;
}

        .stat-left {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .stat-right {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: space-between;
            min-height: 100%;
            padding: 0.5rem;
            border-radius: 0.5rem;
        }

        .stat-label {
            text-align: center;
            font-size: 1.35rem;
            font-weight: 600;
            margin-top: 0.05rem;
            background: linear-gradient(to right, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
            cursor: pointer;
        }

        .stat-label:hover {
  transform: scale(1.1);
  letter-spacing: 0.05em;
}
        .stat-content {
            flex: 1;
            display: flex;
            gap: 1rem;
        }

        .stat-number,
        .top-list-item {
            background: linear-gradient(to right,#14b8a6,#7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
        }

        .stat-number {
            font-size: 6rem;
            font-weight: 800;
        }

        .top-list-item {
            font-weight: 600;
            font-size: 1.4rem;
            display: flex;
            align-items: center;
            gap: 0.35rem;
        }

        .top-list-item img {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            object-fit: cover;
        }

        .venue-name {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .venue-name-text,
        .venue-count {
            background: linear-gradient(to right, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
            font-weight: 700;
            
        }
        #venuesTop {
            display: grid;
            grid-template-columns: 1fr 3fr 1fr;
            grid-template-rows: repeat(3, 1fr);
            row-gap: 0.5rem;
            column-gap: 0.5rem;
            align-items: center;
            align-content: start;
            min-height: 12rem;
        }

        .venue-count {
            margin-left: 1rem;
            font-size: 1.5rem;
        }
        #gamesTop {
    margin-top: 0.5rem;
    display: grid;
    grid-template-rows: repeat(3, 1fr);
    row-gap: 0.75rem;
    align-content: start;
    min-height: 12rem; /* Ensures full space exists */
}
        .top-game-link {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            column-gap: 0.5rem;
            align-items: center;
            text-decoration: none;
            transition: transform 0.2s;
        }
        .top-game-link:hover {
            transform: scale(1.03);
        }
        .game-rank { text-align: left; font-size: 1.6rem; margin-left: 1rem;}
        .game-matchup {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            gap: 0.25rem;
        }
        .game-rating { text-align: right; font-size: 1.6rem; margin-left: 2.5rem; margin-right: 0.5rem;}
        .game-date { font-size: 0.75rem; }
        .game-logo-sm {
            width: 1.79rem;
            height: 1.79rem;

            object-fit: cover;
        }

        #teamsTop {
            display: flex;
            gap: 0.5rem;
            align-items: stretch;
            height: 100%;
            width: 100%;
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .team-stat-col {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            color: #fff;
            height: 100%;
        }

        .team-count {
            font-size: 3.5rem;
            font-weight: 700;
        }

        .team-logo {
            width: 40px;
            height: 40px;
            object-fit: contain;
        }

        #statesTop {
    display: flex;
    flex-direction: row;
    justify-content: flex-start; /* <-- fix this */
    align-items: stretch;
    width: 100%;
    height: 100%;
    border-radius: 0.5rem;
    overflow: hidden;
    text-align: center;
    gap: 0.5rem; /* optional: adds space between items */
}

.state-stat-col {
    flex: 0 0 33.33%;
    max-width: 33.33%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    color: #ffffff;
    height: 100%;
    text-align: center;
}

        .state-abbr {
            font-size: 1.5rem;
            font-weight: 600;
        }

        #conferenceBlock {
  position: relative;
}

        /* Conferences specific styles */
        #conferenceBlock .stat-content {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  width: 100%;
  min-height: 12rem;
}

#conferenceBlock .stat-left {
  width: 25%;
  display: flex;
  flex-direction: column;
  align-items: center;       /* horizontal centering */
  justify-content: center;   /* vertical centering */
  height: 100%;              /* ensure it fills the vertical space of stat-content */
}

#conferenceBlock .stat-right-column {
  width: 75%; /* <-- now everything aligns based on the new divider */
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

#venuesModalBody {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

#venuesModalBody .stat-row {
  display: grid;
  grid-template-columns: 2fr 5fr 1fr;
  column-gap: 0.5rem;
  row-gap: 0;
  align-items: center;
}

#venuesModalBody .stat-row:not(:last-child) {
  border-bottom: 1px solid rgba(0,0,0,0.15);
  padding-bottom: 0.5rem;
}

#venuesModalBody .stat-row > div {
  padding: 0.25rem 0;
}

#venuesModalBody .conference-name-text,
#venuesModalBody .conference-percentage-text {
  font-size: 1.25rem;
  font-weight: 600;
  display: flex;
  align-items: center;
}

#venuesModalBody .conference-percentage-text {
  margin-right: 0;
  justify-content: flex-end;
  text-align: right;
}

#venuesModalBody .conference-dots-row {
  flex-wrap: wrap;
}



#conferenceBlock .stat-rows {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.stat-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 1rem;
}
.stat-name-col {
  flex: 2;
  text-align: left;
}
.stat-middle {
  flex: 4;
  display: flex;
  gap: 4px;
  justify-content: flex-start;
  align-items: center;
}
.stat-percent-col {
  flex: 1;
  text-align: right;
}


.team-dot {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 50%;
  background-color: #bbb;
  margin-right: 2px;
  overflow: hidden;
  padding: 1px;
}

.team-dot img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
  display: block;
}

.unlocked-team img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
}

.team-dot.locked-venue {
  opacity: 0.3;
  filter: grayscale(100%);
}

.team-dot.unlocked-venue {
  box-shadow: 0 0 0 2px rgba(20,184,166,0.8), 0 0 6px rgba(126,34,206,0.6);
}

.team-dot.unlocked-venue img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
}

.conference-dots-row {
  display: flex;
  flex-wrap: nowrap; /* ← forces horizontal line */
  gap: 4px;
  margin: 0; /* remove top margin that causes misalignment */
}

.conference-name-text {
  font-size: 2.25rem;
  font-weight: 700;
  background: linear-gradient(to right, #14b8a6, #7e22ce);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
  text-align: left; /* <-- force left alignment */
}

.conference-percentage-text {
  font-size: 1.8rem;
  font-weight: 600;
  margin-right: 3rem;
  text-align: right;
  background: linear-gradient(to right, #14b8a6, #7e22ce);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}
#conferenceBlock .stat-percent-col {
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
}

#conferenceBlock .conference-percentage-text {
  margin-right: 0;
  text-align: center;
}

.gold-text {
  background: linear-gradient(to right, #ffd700, #ffcc00);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
  font-weight: bold;
}

.gold-text {
  background: linear-gradient(to right, #ffd700, #ffcc00);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
  font-weight: bold;
}

.stat-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 0.5rem;
  width: 100%;
}

#conferenceBlock::after {
  content: '';
  position: absolute;
  top: 0;
  bottom: 0;
  left: 24.5%;
  width: 2px;
  transform: translateX(0); /* No need to center it since it's not 50% */
  background: linear-gradient(to bottom, #14b8a6, #7e22ce);
  z-index: 1;
}

@media screen and (max-width: 768px) {
  .stats-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .stat-block {
    min-height: auto;
  }

  .stat-content {

    gap: 0.75rem;
  }
  .stat-right {
    width: 100%;
    padding: 0.5rem;
  }

  .stat-right .stat-row {

    gap: 0.25rem;
  }

  .stat-number {
    font-size: 3rem;
  }

  .stat-label {
    font-size: 1.1rem;
  }

  .top-list-item {
    font-size: 1.2rem;
  }

  .top-list-item img,
  .game-logo-sm,
  .team-logo {
    width: 1.5rem;
    height: 1.5rem;
  }

  .venue-name-text {
    font-size: 0.9rem;
  }

  .venue-count,
  .game-rank,
  .game-rating {
    font-size: 1.25rem;
  }

  #teamsTop,
  #statesTop {
    flex-direction: column;
  }

  .team-stat-col,
  .state-stat-col {
    width: 100%;
    max-width: 100%;
  }


  #gamesTop .game-matchup .d-flex {
    flex-wrap: nowrap !important;
  }

  #gamesTop .game-logo-sm {
    width: 1rem;
    height: 1rem;
  }

  #conferenceBlock .conference-name-text {
    font-size: 1.125rem;
  }

  #conferenceBlock .team-dot {
    width: 0.75rem;
    height: 0.75rem;
  }

  #conferenceBlock .conference-percentage-text {
    font-size: 0.9rem;
  }


  #conferenceBlock .stat-left {
    display: none;
  }

  #conferenceBlock .stat-right-column {
    width: 100%;
  }

  #conferenceBlock::after {
    content: none;
  }

}

    </style>
</head>
<body class="d-flex flex-column min-vh-100">
    <%- include('partials/header') %>
    <%- include('partials/profileHeader', { user, isCurrentUser, isFollowing, canMessage, viewer, activeTab: 'stats' }) %>
    <div class="container my-4 flex-grow-1">
        <div class="stats-grid">
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="gamesCount" class="stat-number"></div>
                        <h3 id="gamesHeader" class="stat-label">Games</h3>
                    </div>
                    <div id="gamesTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="venuesCount" class="stat-number"></div>
                        <h3 id="venuesHeader" class="stat-label">Venues</h3>
                    </div>
                    <div id="venuesTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="teamsCount" class="stat-number"></div>
                        <h3 id="teamsHeader" class="stat-label">Teams</h3>
                    </div>
                    <div id="teamsTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="statesCount" class="stat-number"></div>
                        <h3 id="statesHeader" class="stat-label">States</h3>
                    </div>
                    <div id="statesTop" class="stat-right"></div>
                </div>
            </div>
            
        </div>
        <br>
        <br>
        <div class="stat-block" id="conferenceBlock">
            <div class="stat-content">
              
              <!-- Left block with count and label -->
              <div class="stat-left">
                <div id="conferencesCount" class="stat-number">
                  <%= conferenceStats.filter(c => c.percentage > 0).length %>
                </div>
                <h3 class="stat-label">Conferences</h3>
              </div>
              
              <!-- Right block that holds all rows vertically -->
              <div class="stat-right-column">
                <% conferenceStats
                  .filter(c => c.percentage > 0)
                  .sort((a, b) => b.percentage - a.percentage)
                  .forEach(function(conf) { %>
                  
                  <div class="stat-row">
                    <div class="stat-name-col conference-name-text"><%= conf.name %></div>
                    <div class="stat-middle conference-dots-row">
                        <%
                          const teamIdsInConf = conferenceTeamMap[conf.name] || [];
                          const unlockedTeams = teamIdsInConf.filter(id => userTeamIds.includes(String(id)));
                          const lockedCount = conf.totalTeams - unlockedTeams.length;
                          const visitedCount = typeof conf.teamsVisited === 'number' ? conf.teamsVisited : unlockedTeams.length;
                          const completedConference = visitedCount === conf.totalTeams;

                          // First show unlocked teams
                          unlockedTeams.forEach(teamId => {
                            const team = teamMap[teamId];
                            if (team && team.logos?.[0]) {
                        %>
                              <span class="team-dot unlocked-team" style="background-color: <%= team.alternateColor || '#ccc' %>;">
                                <img src="<%= team.logos[0] %>" alt="Team Logo" />
                              </span>
                        <%   }
                          });
                      
                          // Then pad with gray dots
                          for (let i = 0; i < lockedCount; i++) { 
                        %>
                          <span class="team-dot"></span>
                        <% } %>
                      </div>
                      
                    <div class="stat-percent-col conference-percentage-text">
                      <span class="<%= completedConference ? 'gold-text' : '' %>">
                        <%= visitedCount %>/<%= conf.totalTeams %>
                      </span>
                    </div>
                  </div>
                <% }) %>
              </div>
          
            </div>
          </div>
          
           <!-- close stat-block -->
          
        
          
          

    </div>

    <div class="modal fade user-search-modal" id="gamesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <div class="games-header-stack">
                        <h5 class="modal-title mb-0">All Games</h5>
                        <div class="games-toggle-wrapper ms-auto">
                            <span class="games-toggle-option active" data-games-sort-label="recent">Recent</span>
                            <label class="games-toggle mb-0" for="gamesSortToggle">
                                <input type="checkbox" id="gamesSortToggle" aria-label="Toggle game order between recent and rating">
                                <span class="toggle-track"></span>
                                <span class="toggle-thumb"></span>
                            </label>
                            <span class="games-toggle-option" data-games-sort-label="rating">Rating</span>
                        </div>
                    </div>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="gamesModalBody" class="d-flex flex-column gap-2"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="venuesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All Venues</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="venuesModalBody" class="d-flex flex-column"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="teamsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All Teams</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="teamsModalBody" class="d-grid" style="grid-template-columns: 1fr 1fr 3fr 1fr; row-gap:0.5rem; column-gap:0.5rem;"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="statesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All States</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body states-modal-body">
                    <div class="states-modal-layout">
                        <div class="states-modal-map-column">
                            <div class="states-map-container" id="statesMapContainer">
                                <div class="states-map-tooltip d-none" id="statesMapTooltip"></div>
                                <div class="states-map-icon-layer" id="statesMapIconLayer"></div>
                            </div>
                            <div class="states-modal-empty text-center text-muted d-none" id="statesModalEmpty">No states visited yet.</div>
                        </div>
                        <div class="states-modal-list-column">
                            <h6 class="states-modal-list-title gradient-text text-uppercase small fw-semibold mb-3">State Totals</h6>
                            <div id="statesModalBody" class="states-modal-list"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
(function () {
  // ---- Data from server-side template ----
  const gameEntries = <%- JSON.stringify(gameEntries || []) %>;
  const topRatedGames = <%- JSON.stringify(topRatedGames || []) %>;
  const teamEntries = <%- JSON.stringify(teamEntries || []) %>;
  const venueEntries = <%- JSON.stringify(venueEntries || []) %>;
  const stateEntries = <%- JSON.stringify(stateEntries || []) %>;
  const venuesList = <%- JSON.stringify(venuesList || []) %>;
  const conferenceTeamMap = <%- JSON.stringify(conferenceTeamMap || {}) %>;
  const teamsCount = <%- typeof teamsCount !== 'undefined' ? teamsCount : 0 %>;
  const venuesCount = <%- typeof venuesCount !== 'undefined' ? venuesCount : 0 %>;
  const statesCount = <%- typeof statesCount !== 'undefined' ? statesCount : 0 %>;

  const FALLBACK_VENUE_IMAGE = '/images/stadium.png';
  const VISITED_FILL = '#0d9488';
  const VISITED_HOVER_FILL = '#2dd4bf';
  const UNVISITED_FILL = '#1f2937';
  const UNVISITED_HOVER_FILL = '#4b5563';

  let bootstrapMissingLogged = false;
  function getBootstrapModal(element) {
    if (!element) return null;
    if (!window.bootstrap || !bootstrap.Modal) {
      if (!bootstrapMissingLogged) {
        console.error('[modal] Bootstrap bundle not loaded');
        bootstrapMissingLogged = true;
      }
      return null;
    }
    return bootstrap.Modal.getOrCreateInstance(element);
  }

  const STATE_NAME_TO_ABBR = {
    'Alabama': 'AL',
    'Alaska': 'AK',
    'Arizona': 'AZ',
    'Arkansas': 'AR',
    'California': 'CA',
    'Colorado': 'CO',
    'Connecticut': 'CT',
    'Delaware': 'DE',
    'District of Columbia': 'DC',
    'Florida': 'FL',
    'Georgia': 'GA',
    'Hawaii': 'HI',
    'Idaho': 'ID',
    'Illinois': 'IL',
    'Indiana': 'IN',
    'Iowa': 'IA',
    'Kansas': 'KS',
    'Kentucky': 'KY',
    'Louisiana': 'LA',
    'Maine': 'ME',
    'Maryland': 'MD',
    'Massachusetts': 'MA',
    'Michigan': 'MI',
    'Minnesota': 'MN',
    'Mississippi': 'MS',
    'Missouri': 'MO',
    'Montana': 'MT',
    'Nebraska': 'NE',
    'Nevada': 'NV',
    'New Hampshire': 'NH',
    'New Jersey': 'NJ',
    'New Mexico': 'NM',
    'New York': 'NY',
    'North Carolina': 'NC',
    'North Dakota': 'ND',
    'Ohio': 'OH',
    'Oklahoma': 'OK',
    'Oregon': 'OR',
    'Pennsylvania': 'PA',
    'Rhode Island': 'RI',
    'South Carolina': 'SC',
    'South Dakota': 'SD',
    'Tennessee': 'TN',
    'Texas': 'TX',
    'Utah': 'UT',
    'Vermont': 'VT',
    'Virginia': 'VA',
    'Washington': 'WA',
    'West Virginia': 'WV',
    'Wisconsin': 'WI',
    'Wyoming': 'WY',
    'Puerto Rico': 'PR'
  };

  const STATE_ABBR_TO_NAME = Object.fromEntries(Object.entries(STATE_NAME_TO_ABBR).map(([name, abbr]) => [abbr, name]));

  const stateMapRuntime = {
    initialized: false,
    dataPromise: null,
    container: null,
    iconLayer: null,
    tooltip: null,
    svg: null,
    path: null,
    viewBox: [960, 600],
    abbrToFeature: new Map(),
    hasError: false
  };

  let stateMapResizeHandle = null;

  let allGamesByRating = [];
  let allGamesByChron = [];
  let gameRankMap = new Map();
  let gamesSortMode = 'recent';
  let gamesSortAnimationHandle = null;
  let gamesSortCleanupHandle = null;

  // ---- Helpers (same as you had) ----
  function buildGameRows(games) {
    return games.map((g, index) => {
      const rankLabel = gameRankMap.get(g._id) || `${index + 1}.`;
      return `
        <a href="/pastGames/${g._id}" class="top-game-link">
          <div class="game-rank gradient-text fw-semibold">${rankLabel}</div>
          <div class="game-matchup">
            <div class="gradient-text small fw-light game-date">${formatGameDate(g.gameDate)}</div>
            <div class="d-flex align-items-center justify-content-center flex-wrap gap-1">
              <img src="${g.awayTeamLogoUrl}" class="game-logo-sm" alt="">
              <span class="gradient-text">@</span>
              <img src="${g.homeTeamLogoUrl}" class="game-logo-sm" alt="">
            </div>
          </div>
          <div class="game-rating gradient-text fw-semibold">${Number(g.rating).toFixed(1)}</div>
        </a>`;
    }).join('');
  }

  function buildVenueRows(entries){
    let prevCount = null, rank = 0, displayVenueRank = 0;
    return entries.map(item => {
      rank++;
      if(item.count !== prevCount) displayVenueRank = rank;
      const prefix = entries.filter(e => e.count === item.count).length > 1 ? 'T-' : '';
      prevCount = item.count;
      const v = item.venue || {};
      const name = v.name || '';
      const img = v.imgUrl || '/images/stadium.png';
      return `
        <div class="top-list-item">${prefix}${displayVenueRank}.</div>
        <div class="venue-name"><img src="${img}" alt="${name}" class="avatar avatar-sm"><p class="venue-name-text">${name}</p></div>
        <div class="venue-count">${item.count}</div>
      `;
    }).join('');
  }

  function buildVenueModalRows() {
    const venueByTeam = {};
    (venuesList || []).forEach(v => {
      if (v && v.team) {
        const tid = typeof v.team === 'object' && v.team._id ? v.team._id : v.team;
        venueByTeam[String(tid)] = v;
      }
    });

    return Object.entries(conferenceTeamMap).map(([conf, teamIds]) => {

      const unlockedIds = teamIds.filter(tid => venueByTeam[String(tid)]);
      if (unlockedIds.length === 0) return '';

      const sortedIds = [...teamIds].sort((a, b) => {
        const aUnlocked = venueByTeam[String(a)] ? 0 : 1;
        const bUnlocked = venueByTeam[String(b)] ? 0 : 1;
        return aUnlocked - bUnlocked;
      });

      const dots = sortedIds.map(tid => {

        const ven = venueByTeam[String(tid)];
        if (ven) {
          const img = ven.imgUrl || '/images/stadium.png';
          const name = ven.name || '';
          return `<span class="team-dot unlocked-venue" title="${name}"><img src="${img}" alt="${name}"></span>`;
        }
        return '<span class="team-dot locked-venue"></span>';
      }).join('');


      const pct = Math.round((unlockedIds.length / teamIds.length) * 100);


      return `
        <div class="stat-row">
          <div class="stat-name-col conference-name-text">${conf}</div>
          <div class="stat-middle conference-dots-row">${dots}</div>
          <div class="stat-percent-col conference-percentage-text">${pct}%</div>
        </div>`;

    }).filter(Boolean).join('');

  }

  function buildTeamRows(entries){
    let prevCount = null, rank = 0, displayTeamRank = 0;
    return entries.map(item => {
      rank++;
      if(item.count !== prevCount) displayTeamRank = rank;
      const prefix = entries.filter(e => e.count === item.count).length > 1 ? 'T-' : '';
      prevCount = item.count;
      const team = item.team;
      const logo = (team.logos && team.logos[0]) ? team.logos[0] : '/images/placeholder.jpg';
      const name = team.school || team.name;
      return `
        <div class="top-list-item">${prefix}${displayTeamRank}.</div>
        <a href="/team/${team._id}" class="team-link">
          <img src="${logo}" alt="${name}" class="game-logo-sm">
        </a>
        <div class="venue-name"><span class="venue-name-text">${name}</span></div>
        <div class="venue-count">${item.count}</div>
      `;
    }).join('');
  }

  function buildStateRows(entries){
    let prevCount = null, rank = 0, displayStateRank = 0;
    return entries.map(([name,count]) => {
      rank++;
      if(count !== prevCount) displayStateRank = rank;
      const prefix = entries.filter(e => e[1] === count).length > 1 ? 'T-' : '';
      prevCount = count;
      return `
        <div class="top-list-item">${prefix}${displayStateRank}.</div>
        <div class="venue-name"><span class="venue-name-text">${name}</span></div>
        <div class="venue-count">${count}</div>
      `;
    }).join('');
  }

  function computeStateVisitSummary(entries = []) {
    const byState = {};
    for (const entry of entries) {
      const game = entry && entry.game;
      const venue = game && game.venue;
      const fallbackVenue = entry && entry.venue;
      const stateValue = (venue && (venue.state || venue.State)) || (fallbackVenue && fallbackVenue.state) || null;
      if (!stateValue) continue;
      const stateAbbr = String(stateValue).trim().toUpperCase();
      if (!stateAbbr) continue;
      if (!byState[stateAbbr]) {
        byState[stateAbbr] = { count: 0, venues: new Map() };
      }
      const stateRecord = byState[stateAbbr];
      stateRecord.count += 1;

      const venueId = venue && (venue.venueId || venue._id || venue.id);
      const venueName = (venue && (venue.name || venue.venueName)) || (fallbackVenue && (fallbackVenue.name || fallbackVenue.venueName)) || '';
      const venueImage = (venue && (venue.imgUrl || venue.image || venue.logoUrl)) || (fallbackVenue && (fallbackVenue.imgUrl || fallbackVenue.image)) || FALLBACK_VENUE_IMAGE;
      const key = venueId || venueName || `${stateAbbr}-${stateRecord.venues.size}`;
      if (!stateRecord.venues.has(key)) {
        stateRecord.venues.set(key, {
          id: key,
          name: venueName,
          image: venueImage || FALLBACK_VENUE_IMAGE
        });
      }
    }

    const result = {};
    Object.entries(byState).forEach(([abbr, data]) => {
      result[abbr] = {
        count: data.count,
        venues: Array.from(data.venues.values())
      };
    });

    return {
      byState: result,
      visitedStateCount: Object.keys(result).length
    };
  }

  function updateStatesModalEmptyState() {
    const container = document.getElementById('statesMapContainer');
    const messageEl = document.getElementById('statesModalEmpty');
    if (!container || !messageEl) return;
    if (stateMapRuntime.hasError) {
      container.classList.add('d-none');
      messageEl.classList.remove('d-none');
      return;
    }
    const summary = window.stateVisitSummary;
    const hasVisits = summary && summary.visitedStateCount > 0;
    container.classList.toggle('d-none', !hasVisits);
    messageEl.classList.toggle('d-none', hasVisits);
  }

  async function ensureStatesMap() {
    updateStatesModalEmptyState();
    const summary = window.stateVisitSummary;
    if (!summary || summary.visitedStateCount === 0) return;

    if (typeof d3 === 'undefined' || typeof topojson === 'undefined') {
      console.error('[states-map] Required libraries missing');
      return;
    }

    if (!stateMapRuntime.initialized) {
      if (!stateMapRuntime.dataPromise) {
        stateMapRuntime.dataPromise = fetch('https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json')
          .then(res => {
            if (!res.ok) throw new Error('Failed to load US atlas');
            return res.json();
          });
      }

      try {
        const us = await stateMapRuntime.dataPromise;
        renderStateMap(us, summary);
      } catch (err) {
        console.error('[states-map] Unable to render map', err);
        stateMapRuntime.hasError = true;
        stateMapRuntime.dataPromise = null;
        const messageEl = document.getElementById('statesModalEmpty');
        if (messageEl) {
          messageEl.textContent = 'Unable to load map.';
          messageEl.classList.remove('d-none');
        }
        updateStatesModalEmptyState();
        return;
      }
    } else {
      updateStatePathFills();
      renderStateVenueIcons();
    }
  }

  function renderStateMap(us, summary) {
    const container = document.getElementById('statesMapContainer');
    const iconLayer = document.getElementById('statesMapIconLayer');
    const tooltip = document.getElementById('statesMapTooltip');
    if (!container || !iconLayer || !tooltip) return;

    stateMapRuntime.hasError = false;
    stateMapRuntime.container = container;
    stateMapRuntime.iconLayer = iconLayer;
    stateMapRuntime.tooltip = tooltip;

    const [width, height] = stateMapRuntime.viewBox;
    const svg = d3.select(container)
      .append('svg')
      .attr('class', 'states-map-svg')
      .attr('viewBox', `0 0 ${width} ${height}`)
      .attr('preserveAspectRatio', 'xMidYMid meet');

    const path = d3.geoPath();
    stateMapRuntime.path = path;
    stateMapRuntime.svg = svg;
    stateMapRuntime.abbrToFeature = new Map();

    const states = topojson.feature(us, us.objects.states).features;
    stateMapRuntime.features = states;

    const visitedStates = summary.byState || {};

    svg.append('g')
      .attr('class', 'states-path-group')
      .selectAll('path')
      .data(states)
      .join('path')
      .attr('class', 'state-path')
      .attr('data-state', d => {
        const name = d && d.properties ? d.properties.name : '';
        const abbr = STATE_NAME_TO_ABBR[name] || '';
        if (abbr) stateMapRuntime.abbrToFeature.set(abbr, d);
        return abbr;
      })
      .attr('d', path)
      .attr('fill', d => {
        const name = d && d.properties ? d.properties.name : '';
        const abbr = STATE_NAME_TO_ABBR[name];
        return (abbr && visitedStates[abbr]) ? VISITED_FILL : UNVISITED_FILL;
      })
      .attr('stroke', 'rgba(255, 255, 255, 0.35)')
      .attr('stroke-width', 0.6)
      .on('mouseenter', function(event, d) {
        const name = d && d.properties ? d.properties.name : '';
        const abbr = STATE_NAME_TO_ABBR[name];
        const data = abbr ? visitedStates[abbr] : null;
        if (data) {
          d3.select(this).attr('fill', VISITED_HOVER_FILL);
          showStatesTooltip(event, abbr, data.count);
        } else {
          d3.select(this).attr('fill', UNVISITED_HOVER_FILL);
          hideStatesTooltip();
        }
      })
      .on('mousemove', function(event, d) {
        const name = d && d.properties ? d.properties.name : '';
        const abbr = STATE_NAME_TO_ABBR[name];
        const data = abbr ? visitedStates[abbr] : null;
        if (data) {
          showStatesTooltip(event, abbr, data.count);
        }
      })
      .on('mouseleave', function(event, d) {
        const name = d && d.properties ? d.properties.name : '';
        const abbr = STATE_NAME_TO_ABBR[name];
        const data = abbr ? visitedStates[abbr] : null;
        d3.select(this).attr('fill', data ? VISITED_FILL : UNVISITED_FILL);
        hideStatesTooltip();
      });

    svg.append('path')
      .datum(topojson.mesh(us, us.objects.states, (a, b) => a !== b))
      .attr('class', 'states-border')
      .attr('fill', 'none')
      .attr('stroke', 'rgba(255, 255, 255, 0.55)')
      .attr('stroke-width', 0.7)
      .attr('d', path);

    stateMapRuntime.initialized = true;
    updateStatesModalEmptyState();
    renderStateVenueIcons();
  }

  function updateStatePathFills() {
    if (!stateMapRuntime.svg) return;
    const visited = (window.stateVisitSummary && window.stateVisitSummary.byState) || {};
    stateMapRuntime.svg.selectAll('.state-path').attr('fill', function() {
      const abbr = this.getAttribute('data-state');
      return abbr && visited[abbr] ? VISITED_FILL : UNVISITED_FILL;
    });
  }

  function renderStateVenueIcons() {
    const summary = window.stateVisitSummary;
    if (!summary || summary.visitedStateCount === 0) return;
    const iconLayer = stateMapRuntime.iconLayer;
    const container = stateMapRuntime.container;
    const path = stateMapRuntime.path;
    if (!iconLayer || !container || !path) return;

    iconLayer.innerHTML = '';
    const bounds = container.getBoundingClientRect();
    if (!bounds.width || !bounds.height) return;

    const visitedStates = summary.byState || {};
    const [baseWidth, baseHeight] = stateMapRuntime.viewBox;

    stateMapRuntime.abbrToFeature.forEach((feature, abbr) => {
      const stateData = visitedStates[abbr];
      if (!stateData || !stateData.venues || stateData.venues.length === 0) return;
      const centroid = path.centroid(feature);
      if (!centroid || centroid.some(val => !Number.isFinite(val))) return;
      const [cx, cy] = centroid;
      const baseX = (cx / baseWidth) * bounds.width;
      const baseY = (cy / baseHeight) * bounds.height;
      const venues = stateData.venues;
      const radius = venues.length > 1 ? 18 : 0;

      venues.forEach((venue, index) => {
        const icon = document.createElement('div');
        icon.className = 'state-venue-icon';
        icon.dataset.state = abbr;
        icon.title = venue.name || STATE_ABBR_TO_NAME[abbr] || '';
        icon.style.left = `${baseX}px`;
        icon.style.top = `${baseY}px`;
        const angle = venues.length > 1 ? (index / venues.length) * Math.PI * 2 : 0;
        const dx = radius ? Math.cos(angle) * radius : 0;
        const dy = radius ? Math.sin(angle) * radius : 0;
        icon.style.transform = `translate(-50%, -50%) translate(${dx}px, ${dy}px)`;
        const imageSrc = (venue.image || FALLBACK_VENUE_IMAGE);
        const safeImage = String(imageSrc).replace(/"/g, '\"');
        icon.style.backgroundImage = `url("${safeImage}")`;
        iconLayer.appendChild(icon);
      });
    });
  }

  function showStatesTooltip(event, stateAbbr, count) {
    const tooltip = stateMapRuntime.tooltip;
    const container = stateMapRuntime.container;
    if (!tooltip || !container) return;
    tooltip.textContent = `Games Seen: ${count}`;
    tooltip.classList.remove('d-none');

    const containerRect = container.getBoundingClientRect();
    const tooltipWidth = tooltip.offsetWidth;
    const tooltipHeight = tooltip.offsetHeight;

    let left = event.clientX - containerRect.left + 12;
    let top = event.clientY - containerRect.top + 12;

    if (left + tooltipWidth > containerRect.width) {
      left = containerRect.width - tooltipWidth - 8;
    }
    if (top + tooltipHeight > containerRect.height) {
      top = containerRect.height - tooltipHeight - 8;
    }

    tooltip.style.left = `${Math.max(8, left)}px`;
    tooltip.style.top = `${Math.max(8, top)}px`;
  }

  function hideStatesTooltip() {
    const tooltip = stateMapRuntime.tooltip;
    if (!tooltip) return;
    tooltip.classList.add('d-none');
  }

  function fillStatesModalList() {
    const body = document.getElementById('statesModalBody');
    if (body) body.innerHTML = buildStateRows(window.allRankedStates || []);
  }

  window.addEventListener('resize', () => {
    if (!stateMapRuntime.initialized) return;
    if (stateMapResizeHandle) clearTimeout(stateMapResizeHandle);
    stateMapResizeHandle = setTimeout(() => {
      renderStateVenueIcons();
    }, 150);
  });

  function ordinal(n){ const s=["th","st","nd","rd"],v=n%100; return n+(s[(v-20)%10]||s[v]||s[0]); }
  function formatGameDate(d){
    if(!d) return '';
    const date = new Date(d);
    return new Intl.DateTimeFormat(navigator.language,{dateStyle:'medium'}).format(date);
  }

  function gameTimestamp(game){
    if (!game || !game.gameDate) return 0;
    const time = new Date(game.gameDate).getTime();
    return Number.isFinite(time) ? time : 0;
  }

  function setGamesToggleLabels(mode){
    document.querySelectorAll('[data-games-sort-label]').forEach(el => {
      const value = el.getAttribute('data-games-sort-label');
      el.classList.toggle('active', value === mode);
    });
  }

  function getSortedGames(mode){
    return mode === 'rating' ? allGamesByRating : allGamesByChron;
  }

  function renderGamesModalContent(mode, options = {}){
    const body = document.getElementById('gamesModalBody');
    if (!body) return;
    const games = getSortedGames(mode);
    const animate = options.animate !== false;

    if (gamesSortAnimationHandle) {
      clearTimeout(gamesSortAnimationHandle);
      gamesSortAnimationHandle = null;
    }
    if (gamesSortCleanupHandle) {
      clearTimeout(gamesSortCleanupHandle);
      gamesSortCleanupHandle = null;
    }

    if (!animate) {
      body.classList.remove('is-sorting', 'is-sorted');
      body.innerHTML = buildGameRows(games);
      return;
    }

    body.classList.remove('is-sorted');
    body.classList.add('is-sorting');

    gamesSortAnimationHandle = setTimeout(() => {
      body.innerHTML = buildGameRows(games);
      requestAnimationFrame(() => {
        body.classList.remove('is-sorting');
        body.classList.add('is-sorted');
        gamesSortCleanupHandle = setTimeout(() => {
          body.classList.remove('is-sorted');
          gamesSortCleanupHandle = null;
        }, 450);
      });
      gamesSortAnimationHandle = null;
    }, 180);
  }

  function renderStats() {
    const gradientDirection = window.innerWidth < 768 ? 'to bottom' : 'to right';
    // Games
    const validGames = [];
    const seenGameIds = new Set();
    for (const entry of gameEntries) {
      const g = entry && entry.game;
      if (!g || !g._id || seenGameIds.has(g._id)) continue;
      seenGameIds.add(g._id);
      validGames.push(entry);
    }
    document.getElementById('gamesCount').textContent = validGames.length;

    const gamesTopEl = document.getElementById('gamesTop');
    const baseGames = gameEntries
      .filter(e => e && e.game && e.game._id)
      .map(e => {
        const g = e.game;
        const gameDate = g.startDate || g.StartDate || null;
        const awayLogo = g.awayTeam && g.awayTeam.logos && g.awayTeam.logos[0] ? g.awayTeam.logos[0] : '/images/placeholder.jpg';
        const homeLogo = g.homeTeam && g.homeTeam.logos && g.homeTeam.logos[0] ? g.homeTeam.logos[0] : '/images/placeholder.jpg';
        const rawScore = e.elo ? ((e.elo - 1000) / 1000) * 9 + 1 : 0;
        const rating = Math.max(1.0, Math.min(10.0, Math.round(rawScore * 10) / 10));
        return { _id: g._id, gameDate, awayTeamLogoUrl: awayLogo, homeTeamLogoUrl: homeLogo, rating };
      });

    allGamesByRating = [...baseGames].sort((a, b) => b.rating - a.rating);
    allGamesByChron = [...baseGames].sort((a, b) => gameTimestamp(b) - gameTimestamp(a));

    // Preserve compatibility with any legacy lookups
    window.allRankedGames = allGamesByRating;
    window.allRankedGamesByRating = allGamesByRating;
    window.allRankedGamesByChron = allGamesByChron;

    const ratingCounts = {};
    allGamesByRating.forEach(g => {
      const key = Number(g.rating).toFixed(1);
      ratingCounts[key] = (ratingCounts[key] || 0) + 1;
    });

    gameRankMap = new Map();
    let prevKey = null;
    let rankIndex = 0;
    let displayRank = 0;
    allGamesByRating.forEach(g => {
      rankIndex++;
      const ratingKey = Number(g.rating).toFixed(1);
      if (ratingKey !== prevKey) displayRank = rankIndex;
      const prefix = ratingCounts[ratingKey] > 1 ? 'T-' : '';
      gameRankMap.set(g._id, `${prefix}${displayRank}.`);
      prevKey = ratingKey;
    });

    gamesSortMode = 'recent';

    gamesTopEl.innerHTML = buildGameRows(allGamesByRating.slice(0, 3));

    // Venues
    window.allRankedVenues = venueEntries;
    document.getElementById('venuesCount').textContent = <%- typeof venuesCount !== 'undefined' ? venuesCount : 0 %>;
    document.getElementById('venuesTop').innerHTML = buildVenueRows(venueEntries.slice(0,3));

    // Teams
    window.allRankedTeams = teamEntries;
    document.getElementById('teamsCount').textContent = teamEntries.length;
    const teamsTopEl = document.getElementById('teamsTop');
    const topTeams = teamEntries.slice(0, 3);
    const colors = topTeams.map(item => {
      const t = item.team;
      let c = t.alternateColor && t.alternateColor.toLowerCase() !== '#ffffff' ? t.alternateColor : (t.color || '#666');
      if(!c.startsWith('#')) c = '#' + c;
      return c;
    });
    if(colors.length){
      teamsTopEl.style.background = `linear-gradient(${gradientDirection}, ${colors.join(',')})`;
      teamsTopEl.style.borderRadius = '0.5rem';
    }
    teamsTopEl.innerHTML = topTeams.map(item => {
      const team = item.team;
      const logo = team.logos && team.logos[0] ? team.logos[0] : '/images/placeholder.jpg';
      return `<div class="team-stat-col">
        <div class="team-count">${item.count}</div>
        <a href="/team/${team._id}" class="team-link">
          <img src="${logo}" alt="${team.school}" class="team-logo" title="${team.school}">
        </a>
      </div>`;
    }).join('');

    // States
    window.allRankedStates = stateEntries;
    window.stateVisitSummary = computeStateVisitSummary(gameEntries);
    document.getElementById('statesCount').textContent = statesCount;
    const statesTopEl = document.getElementById('statesTop');
    statesTopEl.style.borderRadius = '0.5rem';
    statesTopEl.style.color = '#333';

    updateStatesModalEmptyState();

    if (stateEntries.length === 0) {
      statesTopEl.style.background = 'none';
      statesTopEl.innerHTML = '';
    } else {
      let gradient;
      if (stateEntries.length === 1) gradient = `linear-gradient(${gradientDirection}, #FFD700, white)`;
      else if (stateEntries.length === 2) gradient = `linear-gradient(${gradientDirection}, #FFD700, #C0C0C0, white)`;
      else gradient = `linear-gradient(${gradientDirection}, #FFD700, #C0C0C0, #CD7F32)`;
      statesTopEl.style.background = gradient;
      statesTopEl.innerHTML = stateEntries.slice(0, 3).map(s => `
        <div class="state-stat-col">
          <div class="team-count">${s[1]}</div>
          <div class="state-abbr">${s[0]}</div>
        </div>
      `).join('');
    }
  }

  function bindModals() {
    const hGames = document.getElementById('gamesHeader');
    const hVenues = document.getElementById('venuesHeader');
    const hTeams  = document.getElementById('teamsHeader');
    const hStates = document.getElementById('statesHeader');
    const mGames  = document.getElementById('gamesModal');
    const mVenues = document.getElementById('venuesModal');
    const mTeams  = document.getElementById('teamsModal');
    const mStates = document.getElementById('statesModal');

    const gamesSortToggle = document.getElementById('gamesSortToggle');

    if (gamesSortToggle) {
      gamesSortToggle.checked = gamesSortMode === 'rating';
      setGamesToggleLabels(gamesSortMode);
      gamesSortToggle.addEventListener('change', (event) => {
        gamesSortMode = event.target.checked ? 'rating' : 'recent';
        setGamesToggleLabels(gamesSortMode);
        renderGamesModalContent(gamesSortMode);
      });
    } else {
      setGamesToggleLabels(gamesSortMode);
    }

    if (mGames) {
      mGames.addEventListener('show.bs.modal', () => {
        if (gamesSortToggle) gamesSortToggle.checked = gamesSortMode === 'rating';
        setGamesToggleLabels(gamesSortMode);
        renderGamesModalContent(gamesSortMode, { animate: false });
      });
    }
    if (mStates) {
      mStates.addEventListener('show.bs.modal', () => {
        fillStatesModalList();
      });
      mStates.addEventListener('shown.bs.modal', () => {
        ensureStatesMap();
      });
    }

    if (hGames && mGames) {
      hGames.addEventListener('click', () => {
        const instance = getBootstrapModal(mGames);
        if (instance) instance.show();
      });
    }
    if (hVenues && mVenues) {
      hVenues.addEventListener('click', () => {
        const body = document.getElementById('venuesModalBody');
        if (body) body.innerHTML = buildVenueModalRows();
        const instance = getBootstrapModal(mVenues);
        if (instance) instance.show();
      });
    }
    if (hTeams && mTeams) {
      hTeams.addEventListener('click', () => {
        const body = document.getElementById('teamsModalBody');
        if (body) body.innerHTML = buildTeamRows(window.allRankedTeams || []);
        const instance = getBootstrapModal(mTeams);
        if (instance) instance.show();
      });
    }
    if (hStates && mStates) {
      hStates.addEventListener('click', () => {
        fillStatesModalList();
        ensureStatesMap();
        const instance = getBootstrapModal(mStates);
        if (instance) instance.show();
      });
    }
  }

  function bindFollowButton() {
    const followBtn = document.getElementById('followBtn');
    if (!followBtn) return;

    followBtn.addEventListener('click', async function () {
      const targetId = this.dataset.user;
      const isFollowing = this.classList.contains('btn-secondary');
      const action = isFollowing ? 'unfollow' : 'follow';
      this.disabled = true;
      try {
        const res = await fetch(`/users/${targetId}/${action}`, { method: 'POST' });
        if (!res.ok) throw new Error('Request failed');
        const countEl = document.querySelector('#followersCount');
        if (isFollowing) {
          this.classList.remove('btn-secondary');
          this.classList.add('btn-primary');
          this.textContent = 'Follow';
          if (countEl) countEl.textContent = parseInt(countEl.textContent, 10) - 1;
        } else {
          this.classList.remove('btn-primary');
          this.classList.add('btn-secondary');
          this.textContent = 'Following';
          if (countEl) countEl.textContent = parseInt(countEl.textContent, 10) + 1;
        }
      } catch (err) {
        console.error('[follow] action failed', err);
        alert('Action failed');
      } finally {
        this.disabled = false;
      }
    });
  }

  function positionProfileChainLogos() {
    const wrapper = document.querySelector('.profile-avatar-wrapper');
    if (!wrapper) return;
    const logos = wrapper.querySelectorAll('.chain-logo');
    if (!logos.length) return;

    const radius = wrapper.offsetWidth * 0.6;
    const centerX = wrapper.offsetWidth / 2;
    const centerY = wrapper.offsetHeight / 2;
    const angleStep = Math.PI / (logos.length + 1);

    logos.forEach((logo, idx) => {
      const angle = Math.PI - angleStep * (idx + 1);
      const x = centerX + radius * Math.cos(angle) - logo.offsetWidth / 2;
      const y = centerY + radius * Math.sin(angle) - logo.offsetHeight / 2;
      logo.style.left = `${x}px`;
      logo.style.top = `${y}px`;
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    try { renderStats(); } catch (e) { console.error('renderStats error', e); }
    bindModals();
    bindFollowButton();
    positionProfileChainLogos();
    console.log('[modals] bound');
  });
})();
</script>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="/js/profileModals.js"></script>
    <script>
        window.existingGameIds = <%- JSON.stringify((user.gameEntries || []).map(e => String(e.gameId))) %>;
        window.gameEntryCount = <%- (user.gameEntries || []).length %>;
        window.ratedGameEntryCount = <%- (user.gameEntries || []).reduce(function(sum, entry){ return sum + (entry && entry.elo != null ? 1 : 0); }, 0) %>;
        window.gameEntryNames = <%- JSON.stringify((gameEntries || []).map(e => {
            const g = e.game || {};
            return `${g.awayTeamName || ''} vs ${g.homeTeamName || ''}`;
        })) %>;
        window.eloGamesData = <%- JSON.stringify(eloGames || []) %>;
    </script>
    <script src="/js/addGameModal.js"></script>
</body>
</html>
