<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - Stats</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/custom.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>

        #gamesModal, #teamsModal, #statesModal { color: #fff; }
        #gamesModal .gradient-text,
        #teamsModal .gradient-text,
        #statesModal .gradient-text,
        #gamesModal .top-list-item,
        #gamesModal .venue-name-text,
        #gamesModal .venue-count,
        #teamsModal .top-list-item,
        #teamsModal .venue-name-text,
        #teamsModal .venue-count,
        #statesModal .top-list-item,
        #statesModal .venue-name-text,
        #statesModal .venue-count {
            background: none !important;
            -webkit-background-clip: initial !important;
            -webkit-text-fill-color: #fff !important;
            color: #fff !important;
        }

        #venuesModal .modal-content {
            background: #fff;
            color: #000;
        }

        #venuesModal .modal-title {
            background: linear-gradient(to right, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        #venuesModal .btn-close {
            filter: invert(0);
        }

        #venuesModal .modal-dialog {
            max-width: 900px;
            width: 90%;
        }

        .venue-name-text {
    font-size: 0.7rem; /* Or even 0.95rem if you need it tighter */
    font-weight: 600;
    max-width: 10rem;
    
    
}


        #statesModal .venue-name-text {
            font-size: 1.75rem;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
        }

        .stat-block {
            position: relative;
            overflow: hidden;
            border-radius: 1rem;
            
            background-color: rgba(255,255,255,0.15);
            backdrop-filter: blur(8px);
            display: flex;
            flex-direction: column;
            min-height: 12rem;
        }
        .stat-block::before {
            content: '';
            position: absolute;
            inset: 0;
            padding: 2px;
            border-radius: 1rem;
            background: linear-gradient(45deg,#14b8a6,#7e22ce);
            -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            -webkit-mask-composite: xor;
            mask-composite: exclude;
            pointer-events: none;
        }

        .stat-block::after {
  content: '';
  position: absolute;
  top: 0;
  bottom: 0;
  left: 50%;
  width: 2px;
  transform: translateX(-50%);
  background: linear-gradient(to bottom, #14b8a6, #7e22ce);
  z-index: 1;
}

        .stat-left {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .stat-right {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: space-between;
            min-height: 100%;
            padding: 0.5rem;
            border-radius: 0.5rem;
        }

        .stat-label {
            text-align: center;
            font-size: 1.35rem;
            font-weight: 600;
            margin-top: 0.05rem;
            background: linear-gradient(to right, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
            cursor: pointer;
        }

        .stat-label:hover {
  transform: scale(1.1);
  letter-spacing: 0.05em;
}
        .stat-content {
            flex: 1;
            display: flex;
            gap: 1rem;
        }

        .stat-number,
        .top-list-item {
            background: linear-gradient(to right,#14b8a6,#7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
        }

        .stat-number {
            font-size: 6rem;
            font-weight: 800;
        }

        .top-list-item {
            font-weight: 600;
            font-size: 1.4rem;
            display: flex;
            align-items: center;
            gap: 0.35rem;
        }

        .top-list-item img {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            object-fit: cover;
        }

        .venue-name {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .venue-name-text,
        .venue-count {
            background: linear-gradient(to right, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
            font-weight: 700;
            
        }
        #venuesTop {
            display: grid;
            grid-template-columns: 1fr 3fr 1fr;
            grid-template-rows: repeat(3, 1fr);
            row-gap: 0.5rem;
            column-gap: 0.5rem;
            align-items: center;
            align-content: start;
            min-height: 12rem;
        }

        .venue-count {
            margin-left: 1rem;
            font-size: 1.5rem;
        }
        #gamesTop {
    margin-top: 0.5rem;
    display: grid;
    grid-template-rows: repeat(3, 1fr);
    row-gap: 0.75rem;
    align-content: start;
    min-height: 12rem; /* Ensures full space exists */
}
        .top-game-link {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            column-gap: 0.5rem;
            align-items: center;
            text-decoration: none;
            transition: transform 0.2s;
        }
        .top-game-link:hover {
            transform: scale(1.03);
        }
        .game-rank { text-align: left; font-size: 1.6rem; margin-left: 1rem;}
        .game-matchup {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            gap: 0.25rem;
        }
        .game-rating { text-align: right; font-size: 1.6rem; margin-left: 2.5rem; margin-right: 0.5rem;}
        .game-date { font-size: 0.75rem; }
        .game-logo-sm {
            width: 1.79rem;
            height: 1.79rem;

            object-fit: cover;
        }

        #teamsTop {
            display: flex;
            gap: 0.5rem;
            align-items: stretch;
            height: 100%;
            width: 100%;
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .team-stat-col {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            color: #fff;
            height: 100%;
        }

        .team-count {
            font-size: 3.5rem;
            font-weight: 700;
        }

        .team-logo {
            width: 40px;
            height: 40px;
            object-fit: contain;
        }

        #statesTop {
    display: flex;
    flex-direction: row;
    justify-content: flex-start; /* <-- fix this */
    align-items: stretch;
    width: 100%;
    height: 100%;
    border-radius: 0.5rem;
    overflow: hidden;
    text-align: center;
    gap: 0.5rem; /* optional: adds space between items */
}

.state-stat-col {
    flex: 0 0 33.33%;
    max-width: 33.33%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    color: #ffffff;
    height: 100%;
    text-align: center;
}

        .state-abbr {
            font-size: 1.5rem;
            font-weight: 600;
        }

        #conferenceBlock {
  position: relative;
}

        /* Conferences specific styles */
        #conferenceBlock .stat-content {
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  width: 100%;
  min-height: 12rem;
}

#conferenceBlock .stat-left {
  width: 25%;
  display: flex;
  flex-direction: column;
  align-items: center;       /* horizontal centering */
  justify-content: center;   /* vertical centering */
  height: 100%;              /* ensure it fills the vertical space of stat-content */
}

#conferenceBlock .stat-right-column {
  width: 75%; /* <-- now everything aligns based on the new divider */
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

#venuesModalBody {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

#venuesModalBody .stat-row {
  display: grid;
  grid-template-columns: 2fr 5fr 1fr;
  column-gap: 0.5rem;
  row-gap: 0;
  align-items: center;
}

#venuesModalBody .stat-row:not(:last-child) {
  border-bottom: 1px solid rgba(0,0,0,0.15);
  padding-bottom: 0.5rem;
}

#venuesModalBody .stat-row > div {
  padding: 0.25rem 0;
}

#venuesModalBody .conference-name-text,
#venuesModalBody .conference-percentage-text {
  font-size: 1.25rem;
  font-weight: 600;
  display: flex;
  align-items: center;
}

#venuesModalBody .conference-percentage-text {
  margin-right: 0;
  justify-content: flex-end;
  text-align: right;
}

#venuesModalBody .conference-dots-row {
  flex-wrap: wrap;
}



#conferenceBlock .stat-rows {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.stat-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 1rem;
}
.stat-name-col {
  flex: 2;
  text-align: left;
}
.stat-middle {
  flex: 4;
  display: flex;
  gap: 4px;
  justify-content: flex-start;
  align-items: center;
}
.stat-percent-col {
  flex: 1;
  text-align: right;
}


.team-dot {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 1.5rem;
  height: 1.5rem;
  border-radius: 50%;
  background-color: #bbb;
  margin-right: 2px;
  overflow: hidden;
  padding: 1px;
}

.team-dot img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
  display: block;
}

.unlocked-team img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
}

.team-dot.locked-venue {
  opacity: 0.3;
  filter: grayscale(100%);
}

.team-dot.unlocked-venue {
  box-shadow: 0 0 0 2px rgba(20,184,166,0.8), 0 0 6px rgba(126,34,206,0.6);
}

.team-dot.unlocked-venue img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border-radius: 50%;
}

.conference-dots-row {
  display: flex;
  flex-wrap: nowrap; /* ← forces horizontal line */
  gap: 4px;
  margin: 0; /* remove top margin that causes misalignment */
}

.conference-name-text {
  font-size: 2.25rem;
  font-weight: 700;
  background: linear-gradient(to right, #14b8a6, #7e22ce);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
  text-align: left; /* <-- force left alignment */
}

.conference-percentage-text {
  font-size: 1.8rem;
  font-weight: 600;
  margin-right: 3rem;
  text-align: right;
  background: linear-gradient(to right, #14b8a6, #7e22ce);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
}

.gold-text {
  background: linear-gradient(to right, #ffd700, #ffcc00);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  color: transparent;
  font-weight: bold;
}

.stat-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 0.5rem;
  width: 100%;
}

#conferenceBlock::after {
  content: '';
  position: absolute;
  top: 0;
  bottom: 0;
  left: 24.5%;
  width: 2px;
  transform: translateX(0); /* No need to center it since it's not 50% */
  background: linear-gradient(to bottom, #14b8a6, #7e22ce);
  z-index: 1;
}

@media screen and (max-width: 768px) {
  .stats-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .stat-block {
    min-height: auto;
  }

  .stat-content {

    gap: 0.75rem;
  }
  .stat-right {
    width: 100%;
    padding: 0.5rem;
  }

  .stat-right .stat-row {

    gap: 0.25rem;
  }

  .stat-number {
    font-size: 3rem;
  }

  .stat-label {
    font-size: 1.1rem;
  }

  .top-list-item {
    font-size: 1.2rem;
  }

  .top-list-item img,
  .game-logo-sm,
  .team-logo {
    width: 1.5rem;
    height: 1.5rem;
  }

  .venue-name-text {
    font-size: 0.9rem;
  }

  .venue-count,
  .game-rank,
  .game-rating {
    font-size: 1.25rem;
  }

  #teamsTop,
  #statesTop {
    flex-direction: column;
  }

  .team-stat-col,
  .state-stat-col {
    width: 100%;
    max-width: 100%;
  }


  #gamesTop .game-matchup .d-flex {
    flex-wrap: nowrap !important;
  }

  #gamesTop .game-logo-sm {
    width: 1rem;
    height: 1rem;
  }

  #conferenceBlock .conference-name-text {
    font-size: 1.125rem;
  }

  #conferenceBlock .team-dot {
    width: 0.75rem;
    height: 0.75rem;
  }

  #conferenceBlock .conference-percentage-text {
    font-size: 0.9rem;
  }


  #conferenceBlock .stat-left {
    display: none;
  }

  #conferenceBlock .stat-right-column {
    width: 100%;
  }

  #conferenceBlock::after {
    content: none;
  }

}

    </style>
</head>
<body class="d-flex flex-column min-vh-100">
    <%- include('partials/header') %>
    <%- include('partials/profileHeader', { user, isCurrentUser, isFollowing, canMessage, viewer, activeTab: 'stats' }) %>
    <div class="container my-4 flex-grow-1">
        <div class="stats-grid">
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="gamesCount" class="stat-number"></div>
                        <h3 id="gamesHeader" class="stat-label">Games</h3>
                    </div>
                    <div id="gamesTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="venuesCount" class="stat-number"></div>
                        <h3 id="venuesHeader" class="stat-label">Venues</h3>
                    </div>
                    <div id="venuesTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="teamsCount" class="stat-number"></div>
                        <h3 id="teamsHeader" class="stat-label">Teams</h3>
                    </div>
                    <div id="teamsTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="statesCount" class="stat-number"></div>
                        <h3 id="statesHeader" class="stat-label">States</h3>
                    </div>
                    <div id="statesTop" class="stat-right"></div>
                </div>
            </div>
            
        </div>
        <br>
        <br>
        <div class="stat-block" id="conferenceBlock">
            <div class="stat-content">
              
              <!-- Left block with count and label -->
              <div class="stat-left">
                <div id="conferencesCount" class="stat-number">
                  <%= conferenceStats.filter(c => c.percentage > 0).length %>
                </div>
                <h3 class="stat-label">Conferences</h3>
              </div>
              
              <!-- Right block that holds all rows vertically -->
              <div class="stat-right-column">
                <% conferenceStats
                  .filter(c => c.percentage > 0)
                  .sort((a, b) => b.percentage - a.percentage)
                  .forEach(function(conf) { %>
                  
                  <div class="stat-row">
                    <div class="stat-name-col conference-name-text"><%= conf.name %></div>
                    <div class="stat-middle conference-dots-row">
                        <%
                          const teamIdsInConf = conferenceTeamMap[conf.name] || [];
                          const unlockedTeams = teamIdsInConf.filter(id => userTeamIds.includes(String(id)));
                          const lockedCount = conf.totalTeams - unlockedTeams.length;
                          const visitedCount = typeof conf.teamsVisited === 'number' ? conf.teamsVisited : unlockedTeams.length;
                          const completedConference = visitedCount === conf.totalTeams;

                          // First show unlocked teams
                          unlockedTeams.forEach(teamId => {
                            const team = teamMap[teamId];
                            if (team && team.logos?.[0]) {
                        %>
                              <span class="team-dot unlocked-team" style="background-color: <%= team.alternateColor || '#ccc' %>;">
                                <img src="<%= team.logos[0] %>" alt="Team Logo" />
                              </span>
                        <%   }
                          });
                      
                          // Then pad with gray dots
                          for (let i = 0; i < lockedCount; i++) { 
                        %>
                          <span class="team-dot"></span>
                        <% } %>
                      </div>
                      
                    <div class="stat-percent-col conference-percentage-text">
                      <span class="<%= completedConference ? 'gold-text' : '' %>">
                        <%= visitedCount %>/<%= conf.totalTeams %>
                      </span>
                    </div>
                  </div>
                <% }) %>
              </div>
          
            </div>
          </div>
          
           <!-- close stat-block -->
          
        
          
          

    </div>

    <div class="modal fade user-search-modal" id="gamesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All Games</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="gamesModalBody" class="d-flex flex-column gap-2"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="venuesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-xl">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All Venues</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="venuesModalBody" class="d-flex flex-column"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="teamsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All Teams</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="teamsModalBody" class="d-grid" style="grid-template-columns: 1fr 1fr 3fr 1fr; row-gap:0.5rem; column-gap:0.5rem;"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="statesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All States</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="statesModalBody" class="d-grid" style="grid-template-columns: 1fr 3fr 1fr; row-gap:0.5rem; column-gap:0.5rem;"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
(function () {
  // guard: make sure Bootstrap JS is present
  if (!window.bootstrap || !bootstrap.Modal) {
    console.error('[modal] Bootstrap bundle not loaded');
  }

  // ---- Data from server-side template ----
  const gameEntries = <%- JSON.stringify(gameEntries || []) %>;
  const topRatedGames = <%- JSON.stringify(topRatedGames || []) %>;
  const teamEntries = <%- JSON.stringify(teamEntries || []) %>;
  const venueEntries = <%- JSON.stringify(venueEntries || []) %>;
  const stateEntries = <%- JSON.stringify(stateEntries || []) %>;
  const venuesList = <%- JSON.stringify(venuesList || []) %>;
  const conferenceTeamMap = <%- JSON.stringify(conferenceTeamMap || {}) %>;
  const teamsCount = <%- typeof teamsCount !== 'undefined' ? teamsCount : 0 %>;
  const venuesCount = <%- typeof venuesCount !== 'undefined' ? venuesCount : 0 %>;
  const statesCount = <%- typeof statesCount !== 'undefined' ? statesCount : 0 %>;

  // ---- Helpers (same as you had) ----
  function buildGameRows(games) {
    const ratingCounts = {};
    games.forEach(g => { ratingCounts[g.rating] = (ratingCounts[g.rating] || 0) + 1; });
    let prevRating = null, rankIndex = 0, displayRank = 0;
    return games.map(g => {
      rankIndex++;
      if (g.rating !== prevRating) displayRank = rankIndex;
      const prefix = ratingCounts[g.rating] > 1 ? 'T-' : '';
      prevRating = g.rating;
      return `
        <a href="/pastGames/${g._id}" class="top-game-link">
          <div class="game-rank gradient-text fw-semibold">${prefix}${displayRank}.</div>
          <div class="game-matchup">
            <div class="gradient-text small fw-light game-date">${formatGameDate(g.gameDate)}</div>
            <div class="d-flex align-items-center justify-content-center flex-wrap gap-1">
              <img src="${g.awayTeamLogoUrl}" class="game-logo-sm" alt="">
              <span class="gradient-text">@</span>
              <img src="${g.homeTeamLogoUrl}" class="game-logo-sm" alt="">
            </div>
          </div>
          <div class="game-rating gradient-text fw-semibold">${Number(g.rating).toFixed(1)}</div>
        </a>`;
    }).join('');
  }

  function buildVenueRows(entries){
    let prevCount = null, rank = 0, displayVenueRank = 0;
    return entries.map(item => {
      rank++;
      if(item.count !== prevCount) displayVenueRank = rank;
      const prefix = entries.filter(e => e.count === item.count).length > 1 ? 'T-' : '';
      prevCount = item.count;
      const v = item.venue || {};
      const name = v.name || '';
      const img = v.imgUrl || '/images/stadium.png';
      return `
        <div class="top-list-item">${prefix}${displayVenueRank}.</div>
        <div class="venue-name"><img src="${img}" alt="${name}" class="avatar avatar-sm"><p class="venue-name-text">${name}</p></div>
        <div class="venue-count">${item.count}</div>
      `;
    }).join('');
  }

  function buildVenueModalRows() {
    const venueByTeam = {};
    (venuesList || []).forEach(v => {
      if (v && v.team) {
        const tid = typeof v.team === 'object' && v.team._id ? v.team._id : v.team;
        venueByTeam[String(tid)] = v;
      }
    });

    return Object.entries(conferenceTeamMap).map(([conf, teamIds]) => {

      const unlockedIds = teamIds.filter(tid => venueByTeam[String(tid)]);
      if (unlockedIds.length === 0) return '';

      const sortedIds = [...teamIds].sort((a, b) => {
        const aUnlocked = venueByTeam[String(a)] ? 0 : 1;
        const bUnlocked = venueByTeam[String(b)] ? 0 : 1;
        return aUnlocked - bUnlocked;
      });

      const dots = sortedIds.map(tid => {

        const ven = venueByTeam[String(tid)];
        if (ven) {
          const img = ven.imgUrl || '/images/stadium.png';
          const name = ven.name || '';
          return `<span class="team-dot unlocked-venue" title="${name}"><img src="${img}" alt="${name}"></span>`;
        }
        return '<span class="team-dot locked-venue"></span>';
      }).join('');


      const pct = Math.round((unlockedIds.length / teamIds.length) * 100);


      return `
        <div class="stat-row">
          <div class="stat-name-col conference-name-text">${conf}</div>
          <div class="stat-middle conference-dots-row">${dots}</div>
          <div class="stat-percent-col conference-percentage-text">${pct}%</div>
        </div>`;

    }).filter(Boolean).join('');

  }

  function buildTeamRows(entries){
    let prevCount = null, rank = 0, displayTeamRank = 0;
    return entries.map(item => {
      rank++;
      if(item.count !== prevCount) displayTeamRank = rank;
      const prefix = entries.filter(e => e.count === item.count).length > 1 ? 'T-' : '';
      prevCount = item.count;
      const team = item.team;
      const logo = (team.logos && team.logos[0]) ? team.logos[0] : '/images/placeholder.jpg';
      const name = team.school || team.name;
      return `
        <div class="top-list-item">${prefix}${displayTeamRank}.</div>
        <a href="/team/${team._id}" class="team-link">
          <img src="${logo}" alt="${name}" class="game-logo-sm">
        </a>
        <div class="venue-name"><span class="venue-name-text">${name}</span></div>
        <div class="venue-count">${item.count}</div>
      `;
    }).join('');
  }

  function buildStateRows(entries){
    let prevCount = null, rank = 0, displayStateRank = 0;
    return entries.map(([name,count]) => {
      rank++;
      if(count !== prevCount) displayStateRank = rank;
      const prefix = entries.filter(e => e[1] === count).length > 1 ? 'T-' : '';
      prevCount = count;
      return `
        <div class="top-list-item">${prefix}${displayStateRank}.</div>
        <div class="venue-name"><span class="venue-name-text">${name}</span></div>
        <div class="venue-count">${count}</div>
      `;
    }).join('');
  }

  function ordinal(n){ const s=["th","st","nd","rd"],v=n%100; return n+(s[(v-20)%10]||s[v]||s[0]); }
  function formatGameDate(d){
    if(!d) return '';
    const date = new Date(d);
    return new Intl.DateTimeFormat(navigator.language,{dateStyle:'medium'}).format(date);
  }

  function renderStats() {
    const gradientDirection = window.innerWidth < 768 ? 'to bottom' : 'to right';
    // Games
    const validGames = [];
    const seenGameIds = new Set();
    for (const entry of gameEntries) {
      const g = entry && entry.game;
      if (!g || !g._id || seenGameIds.has(g._id)) continue;
      seenGameIds.add(g._id);
      validGames.push(entry);
    }
    document.getElementById('gamesCount').textContent = validGames.length;

    const gamesTopEl = document.getElementById('gamesTop');
    const allGames = gameEntries
      .filter(e => e && e.game && e.game._id)
      .map(e => {
        const g = e.game;
        const gameDate = g.startDate || g.StartDate || null;
        const awayLogo = g.awayTeam && g.awayTeam.logos && g.awayTeam.logos[0] ? g.awayTeam.logos[0] : '/images/placeholder.jpg';
        const homeLogo = g.homeTeam && g.homeTeam.logos && g.homeTeam.logos[0] ? g.homeTeam.logos[0] : '/images/placeholder.jpg';
        const rawScore = e.elo ? ((e.elo - 1000) / 1000) * 9 + 1 : 0;
        const rating = Math.max(1.0, Math.min(10.0, Math.round(rawScore * 10) / 10));
        return { _id: g._id, gameDate, awayTeamLogoUrl: awayLogo, homeTeamLogoUrl: homeLogo, rating };
      })
      .sort((a,b) => b.rating - a.rating);

    window.allRankedGames = allGames;
    gamesTopEl.innerHTML = buildGameRows(allGames.slice(0, 3));

    // Venues
    window.allRankedVenues = venueEntries;
    document.getElementById('venuesCount').textContent = <%- typeof venuesCount !== 'undefined' ? venuesCount : 0 %>;
    document.getElementById('venuesTop').innerHTML = buildVenueRows(venueEntries.slice(0,3));

    // Teams
    window.allRankedTeams = teamEntries;
    document.getElementById('teamsCount').textContent = teamEntries.length;
    const teamsTopEl = document.getElementById('teamsTop');
    const topTeams = teamEntries.slice(0, 3);
    const colors = topTeams.map(item => {
      const t = item.team;
      let c = t.alternateColor && t.alternateColor.toLowerCase() !== '#ffffff' ? t.alternateColor : (t.color || '#666');
      if(!c.startsWith('#')) c = '#' + c;
      return c;
    });
    if(colors.length){
      teamsTopEl.style.background = `linear-gradient(${gradientDirection}, ${colors.join(',')})`;
      teamsTopEl.style.borderRadius = '0.5rem';
    }
    teamsTopEl.innerHTML = topTeams.map(item => {
      const team = item.team;
      const logo = team.logos && team.logos[0] ? team.logos[0] : '/images/placeholder.jpg';
      return `<div class="team-stat-col">
        <div class="team-count">${item.count}</div>
        <a href="/team/${team._id}" class="team-link">
          <img src="${logo}" alt="${team.school}" class="team-logo" title="${team.school}">
        </a>
      </div>`;
    }).join('');

    // States
    window.allRankedStates = stateEntries;
    document.getElementById('statesCount').textContent = statesCount;
    const statesTopEl = document.getElementById('statesTop');
    statesTopEl.style.borderRadius = '0.5rem';
    statesTopEl.style.color = '#333';

    if (stateEntries.length === 0) {
      statesTopEl.style.background = 'none';
      statesTopEl.innerHTML = '';
    } else {
      let gradient;
      if (stateEntries.length === 1) gradient = `linear-gradient(${gradientDirection}, #FFD700, white)`;
      else if (stateEntries.length === 2) gradient = `linear-gradient(${gradientDirection}, #FFD700, #C0C0C0, white)`;
      else gradient = `linear-gradient(${gradientDirection}, #FFD700, #C0C0C0, #CD7F32)`;
      statesTopEl.style.background = gradient;
      statesTopEl.innerHTML = stateEntries.slice(0, 3).map(s => `
        <div class="state-stat-col">
          <div class="team-count">${s[1]}</div>
          <div class="state-abbr">${s[0]}</div>
        </div>
      `).join('');
    }
  }

  function bindModals() {
    const hGames = document.getElementById('gamesHeader');
    const hVenues = document.getElementById('venuesHeader');
    const hTeams  = document.getElementById('teamsHeader');
    const hStates = document.getElementById('statesHeader');
    const mGames  = document.getElementById('gamesModal');
    const mVenues = document.getElementById('venuesModal');
    const mTeams  = document.getElementById('teamsModal');
    const mStates = document.getElementById('statesModal');

    if (hGames && mGames) {
      hGames.addEventListener('click', () => {
        const body = document.getElementById('gamesModalBody');
        if (body) body.innerHTML = buildGameRows(window.allRankedGames || []);
        bootstrap.Modal.getOrCreateInstance(mGames).show();
      });
    }
    if (hVenues && mVenues) {
      hVenues.addEventListener('click', () => {
        const body = document.getElementById('venuesModalBody');
        if (body) body.innerHTML = buildVenueModalRows();
        bootstrap.Modal.getOrCreateInstance(mVenues).show();
      });
    }
    if (hTeams && mTeams) {
      hTeams.addEventListener('click', () => {
        const body = document.getElementById('teamsModalBody');
        if (body) body.innerHTML = buildTeamRows(window.allRankedTeams || []);
        bootstrap.Modal.getOrCreateInstance(mTeams).show();
      });
    }
    if (hStates && mStates) {
      hStates.addEventListener('click', () => {
        const body = document.getElementById('statesModalBody');
        if (body) body.innerHTML = buildStateRows(window.allRankedStates || []);
        bootstrap.Modal.getOrCreateInstance(mStates).show();
      });
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    try { renderStats(); } catch (e) { console.error('renderStats error', e); }
    bindModals();
    console.log('[modals] bound');
  });
})();
</script>


    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="/js/profileModals.js"></script>
    <script>
        window.existingGameIds = <%- JSON.stringify((user.gameEntries || []).map(e => String(e.gameId))) %>;
        window.gameEntryCount = <%- (user.gameEntries || []).length %>;
        window.gameEntryNames = <%- JSON.stringify((gameEntries || []).map(e => {
            const g = e.game || {};
            return `${g.awayTeamName || ''} vs ${g.homeTeamName || ''}`;
        })) %>;
        window.eloGamesData = <%- JSON.stringify(eloGames || []) %>;
    </script>
    <script src="/js/addGameModal.js"></script>
    <script>
        const followBtn = document.getElementById('followBtn');
        if(followBtn){
            followBtn.addEventListener('click', async function(){
                const targetId = this.dataset.user;
                const isFollowing = this.classList.contains('btn-secondary');
                const action = isFollowing ? 'unfollow' : 'follow';
                this.disabled = true;
                try {
                    const res = await fetch(`/users/${targetId}/${action}`, { method: 'POST' });
                    if(!res.ok) throw new Error();
                    const countEl = document.querySelector('#followersCount');
                    if(isFollowing){
                        this.classList.remove('btn-secondary');
                        this.classList.add('btn-primary');
                        this.textContent = 'Follow';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) - 1;
                    } else {
                        this.classList.remove('btn-primary');
                        this.classList.add('btn-secondary');
                        this.textContent = 'Following';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) + 1;
                    }
                } catch (err) {
                    alert('Action failed');
                } finally {
                    this.disabled = false;
                }
            });
        }
        const wrapper = document.querySelector('.profile-avatar-wrapper');
        if(wrapper){
            const logos = wrapper.querySelectorAll('.chain-logo');
            if(logos.length){
                const radius = wrapper.offsetWidth * 0.6;
                const centerX = wrapper.offsetWidth / 2;
                const centerY = wrapper.offsetHeight / 2;
                const angleStep = Math.PI / (logos.length + 1);
                logos.forEach((logo, idx) => {
                    const angle = Math.PI - angleStep * (idx + 1);
                    const x = centerX + radius * Math.cos(angle) - logo.offsetWidth / 2;
                    const y = centerY + radius * Math.sin(angle) - logo.offsetHeight / 2;
                    logo.style.left = x + 'px';
                    logo.style.top = y + 'px';
                });
            }
        }
        
        const gamesHeader = document.getElementById('gamesHeader');
        const venuesHeader = document.getElementById('venuesHeader');
        const teamsHeader = document.getElementById('teamsHeader');
        const statesHeader = document.getElementById('statesHeader');
        const gamesModal = document.getElementById('gamesModal');
        const venuesModal = document.getElementById('venuesModal');
        const teamsModal = document.getElementById('teamsModal');
        const statesModal = document.getElementById('statesModal');
        if(gamesHeader && gamesModal){
            gamesHeader.addEventListener('click', () => {
                const body = document.getElementById('gamesModalBody');
                if(body){
                    body.innerHTML = buildGameRows(window.allRankedGames);
                }
                bootstrap.Modal.getOrCreateInstance(gamesModal).show();
            });
        }
        if(venuesHeader && venuesModal){
            venuesHeader.addEventListener('click', () => {
                const body = document.getElementById('venuesModalBody');
                if(body){
                    body.innerHTML = buildVenueModalRows();
                }
                bootstrap.Modal.getOrCreateInstance(venuesModal).show();
            });
        }
        if(teamsHeader && teamsModal){
            teamsHeader.addEventListener('click', () => {
                const body = document.getElementById('teamsModalBody');
                if(body){
                    body.innerHTML = buildTeamRows(window.allRankedTeams);
                }
                bootstrap.Modal.getOrCreateInstance(teamsModal).show();
            });
        }
        if(statesHeader && statesModal){
            statesHeader.addEventListener('click', () => {
                const body = document.getElementById('statesModalBody');
                if(body){
                    body.innerHTML = buildStateRows(window.allRankedStates);
                }
                bootstrap.Modal.getOrCreateInstance(statesModal).show();
            });
        }
            

    </script>
</body>
</html>
