<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - Stats</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/custom.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        .profile-header { background: linear-gradient(to right, #7e22ce, #14b8a6); }
        .trophy-panel { background-color: rgba(255,255,255,0.15); }
        .follow-btn { transition: background-color 0.3s, color 0.3s; }
        .avatar { border-radius: 50%; object-fit: cover; border: 2px solid rgba(255, 255, 255, 0.8); display: inline-block; }
        .profile-avatar { display: block; margin-left: auto; margin-right: auto; }
        .profile-search.form-control { background-color: rgba(255, 255, 255, 0.2) !important; border: 1px solid #ccc !important; color: #fff !important; border-radius: 8px !important; padding: 0.5rem 1rem !important; font-family: inherit !important; font-weight: bold !important; font-size: 1.1rem !important; }
        .profile-search.form-control::placeholder { color: rgba(255, 255, 255, 0.7) !important; font-style: italic; }
        .profile-search.form-control:focus { outline: none !important; box-shadow: 0 0 0 3px rgba(204, 204, 204, 0.5) !important; border-color: #bbb !important; }
        .user-search-modal .modal-content { background: linear-gradient(to right, #7e22ce, #14b8a6); background-clip: padding-box; border-radius: 1rem; border: 1px solid rgba(255, 255, 255, 0.2); box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3); color: #fff; backdrop-filter: blur(10px); font-family: inherit; }
        .user-search-modal .modal-title { font-family: inherit; font-weight: bold; font-size: 1.5rem; color: #fff; }
        .user-search-modal .btn-close { filter: invert(1); }
        .user-search-modal .profile-search.form-control { background-color: rgba(255, 255, 255, 0.2) !important; border: 1px solid #ccc !important; color: #fff !important; font-family: inherit !important; font-weight: bold !important; font-size: 1.1rem !important; border-radius: 8px !important; padding: 0.5rem 1rem 0.5rem 2.5rem !important; transition: box-shadow 0.2s ease, border-color 0.2s ease; }
        .user-search-modal .profile-search.form-control::placeholder { color: rgba(255, 255, 255, 0.7) !important; font-style: italic; }
        .user-search-modal .profile-search.form-control:focus { outline: none !important; box-shadow: 0 0 0 3px rgba(204, 204, 204, 0.5) !important; border-color: #bbb !important; }
        @media (min-width: 768px) { .profile-avatar { margin-left: 0; margin-right: 0; } }
        .avatar-lg { width: clamp(80px, 20vw, 300px); height: clamp(80px, 20vw, 300px); }
        .avatar-sm { width: clamp(40px, 10vw, 60px); height: clamp(40px, 10vw, 60px); }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1rem;
        }

        .stat-block {
            position: relative;
            overflow: hidden;
            border-radius: 1rem;
            padding: 1rem;
            background-color: rgba(255,255,255,0.15);
            backdrop-filter: blur(8px);
            display: flex;
            flex-direction: column;
            min-height: 8rem;
        }
        .stat-block::before {
            content: '';
            position: absolute;
            inset: 0;
            padding: 2px;
            border-radius: 1rem;
            background: linear-gradient(45deg,#14b8a6,#7e22ce);
            -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            -webkit-mask-composite: xor;
            mask-composite: exclude;
            pointer-events: none;
        }

        .stat-title {
            text-align: center;
            margin-bottom: 0.5rem;
            background: linear-gradient(to right,#14b8a6,#7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
            font-weight: bold;
            font-size: 1.1rem;
        }

        .stat-content {
            flex: 1;
            display: flex;
            gap: 1rem;
        }

        .stat-left,
        .stat-right {
            flex: 1;
        }

        .stat-number,
        .top-list-item {
            background: linear-gradient(to right,#14b8a6,#7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
        }

        .stat-number {
            font-size: 2.5rem;
            font-weight: 800;
        }

        .top-list-item {
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 0.25rem;
        }

        .top-list-item img {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            object-fit: cover;
        }
    </style>
</head>
<body class="d-flex flex-column min-vh-100">
    <%- include('partials/header') %>
    <%- include('partials/profileHeader', { user, isCurrentUser, isFollowing, canMessage, viewer, activeTab: 'stats' }) %>

    <div class="container my-4 flex-grow-1">
        <div class="stats-grid">
            <div class="stat-block">
                <div class="stat-title">Games</div>
                <div class="stat-content">
                    <div id="gamesCount" class="stat-left stat-number"></div>
                    <div id="gamesTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-title">Venues</div>
                <div class="stat-content">
                    <div id="venuesCount" class="stat-left stat-number"></div>
                    <div id="venuesTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-title">Teams</div>
                <div class="stat-content">
                    <div id="teamsCount" class="stat-left stat-number"></div>
                    <div id="teamsTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-title">States</div>
                <div class="stat-content">
                    <div id="statesCount" class="stat-left stat-number"></div>
                    <div id="statesTop" class="stat-right"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const gameEntries = <%- JSON.stringify(user.gameEntries || []) %>;
        const venuesList = <%- JSON.stringify(user.venuesList || []) %>;
        const teamsList = <%- JSON.stringify(user.teamsList || []) %>;

        function ordinal(n){
            const s=["th","st","nd","rd"],v=n%100;
            return n+(s[(v-20)%10]||s[v]||s[0]);
        }

        function renderStats(){
            document.getElementById('gamesCount').textContent = gameEntries.length;
            const gamesTopEl = document.getElementById('gamesTop');
            const sortedGames = gameEntries.slice().sort((a,b)=>(b.rating||0)-(a.rating||0)).slice(0,3);
            gamesTopEl.innerHTML = sortedGames.map((e,i)=>{
                const g = e.game || {};
                const name = g.awayTeamName && g.homeTeamName ? `${g.awayTeamName} @ ${g.homeTeamName}` : (g.name||'Game');
                return `<div class="top-list-item">${ordinal(i+1)}. ${name} - ${e.rating ?? ''}</div>`;
            }).join('');

            const venueMap = {};
            venuesList.forEach(v=>{ const n=v.name||v; if(!n) return; venueMap[n]=(venueMap[n]||0)+1; });
            const venueEntries = Object.entries(venueMap).sort((a,b)=>b[1]-a[1]);
            document.getElementById('venuesCount').textContent = Object.keys(venueMap).length;
            document.getElementById('venuesTop').innerHTML = venueEntries.slice(0,3).map((v,i)=>`<div class="top-list-item">${ordinal(i+1)}. ${v[0]} - ${v[1]}</div>`).join('');

            const teamMap = {};
            teamsList.forEach(t=>{ const n=t.school||t; if(!n) return; if(!teamMap[n]) teamMap[n]={count:0,team:t}; teamMap[n].count++; });
            const teamEntries = Object.values(teamMap).sort((a,b)=>b.count-a.count);
            document.getElementById('teamsCount').textContent = Object.keys(teamMap).length;
            let prevCount, prevRank;
            document.getElementById('teamsTop').innerHTML = teamEntries.slice(0,3).map((item,index)=>{
                let rank=index+1,prefix='';
                if(index>0 && item.count===prevCount){ rank=prevRank; prefix='T-'; } else { prevRank=rank; }
                prevCount=item.count;
                const logo=item.team&&item.team.logos&&item.team.logos[0]?`<img src="${item.team.logos[0]}" alt="${item.team.school}">`:'';
                return `<div class="top-list-item">${prefix}${ordinal(rank)}. ${logo} ${item.team.school||item.team} - ${item.count}</div>`;
            }).join('');

            const stateMap = {};
            venuesList.forEach(v=>{ const s=v.state||(v.location&&v.location.state); if(!s) return; stateMap[s]=(stateMap[s]||0)+1; });
            const stateEntries = Object.entries(stateMap).sort((a,b)=>b[1]-a[1]);
            document.getElementById('statesCount').textContent = Object.keys(stateMap).length;
            document.getElementById('statesTop').innerHTML = stateEntries.slice(0,3).map((s,i)=>{
                let prefix='';
                if(i>0 && s[1]===stateEntries[i-1][1]) prefix='T-';
                return `<div class="top-list-item">${prefix}${ordinal(i+1)}. ${s[0]} - ${s[1]}</div>`;
            }).join('');
        }
        document.addEventListener('DOMContentLoaded', renderStats);
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        const searchInput = document.getElementById('searchInput');
        const resultsEl = document.getElementById('searchResults');
        const followBtn = document.getElementById('followBtn');
        const userSearchModal = document.getElementById('userSearchModal');
        if(followBtn){
            followBtn.addEventListener('click', async function(){
                const targetId = this.dataset.user;
                const isFollowing = this.classList.contains('btn-secondary');
                const action = isFollowing ? 'unfollow' : 'follow';
                this.disabled = true;
                try {
                    const res = await fetch(`/users/${targetId}/${action}`, { method: 'POST' });
                    if(!res.ok) throw new Error();
                    const countEl = document.querySelector('#followersCount');
                    if(isFollowing){
                        this.classList.remove('btn-secondary');
                        this.classList.add('btn-primary');
                        this.textContent = 'Follow';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) - 1;
                    } else {
                        this.classList.remove('btn-primary');
                        this.classList.add('btn-secondary');
                        this.textContent = 'Following';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) + 1;
                    }
                } catch (err) {
                    alert('Action failed');
                } finally {
                    this.disabled = false;
                }
            });
        }
        if(searchInput){
            searchInput.addEventListener('input', async function(){
                const q = this.value.trim();
                if(!q){ resultsEl.innerHTML=''; return; }
                const res = await fetch('/users/search?q='+encodeURIComponent(q));
                if(!res.ok) return;
                const data = await res.json();
                const currentId = '<%= viewer ? viewer.id : "" %>';
                resultsEl.innerHTML = data.map(u=>{
                    const following = u.followers && u.followers.includes(currentId);
                    const imgUrl = `/users/${u._id}/profile-image`;
                    return `<div class="col-md-4"><div class="card p-2 d-flex flex-row align-items-center gap-2">`+
                        `<img src="${imgUrl}" class="avatar avatar-sm">`+
                        `<div class="flex-grow-1"><a href="/users/${u._id}" class="text-decoration-none">${u.username}</a></div>`+
                        (currentId && u._id !== currentId ? `<button data-id="${u._id}" class="btn btn-${following?'secondary':'primary'} btn-sm follow-toggle">${following?'Following':'Follow'}</button>`:'')+
                        `</div></div>`; }).join('');
            });
            resultsEl.addEventListener('click', async function(e){
                const btn = e.target.closest('.follow-toggle');
                if(!btn) return;
                const targetId = btn.dataset.id;
                const isFollowing = btn.classList.contains('btn-secondary');
                const action = isFollowing ? 'unfollow' : 'follow';
                btn.disabled = true;
                try{
                    const res = await fetch(`/users/${targetId}/${action}`, {method:'POST'});
                    if(!res.ok) throw new Error();
                    if(isFollowing){
                        btn.classList.remove('btn-secondary');
                        btn.classList.add('btn-primary');
                        btn.textContent = 'Follow';
                    }else{
                        btn.classList.remove('btn-primary');
                        btn.classList.add('btn-secondary');
                        btn.textContent = 'Following';
                    }
                }catch(err){
                    alert('Action failed');
                }finally{
                    btn.disabled = false;
                }
            });
        }
        if(userSearchModal){
            userSearchModal.addEventListener('hidden.bs.modal', () => {
                if(searchInput){
                    searchInput.value = '';
                    resultsEl.innerHTML = '';
                }
            });
        }
        const wrapper = document.querySelector('.profile-avatar-wrapper');
        if(wrapper){
            const logos = wrapper.querySelectorAll('.chain-logo');
            if(logos.length){
                const radius = wrapper.offsetWidth * 0.6;
                const centerX = wrapper.offsetWidth / 2;
                const centerY = wrapper.offsetHeight / 2;
                const angleStep = Math.PI / (logos.length + 1);
                logos.forEach((logo, idx) => {
                    const angle = Math.PI - angleStep * (idx + 1);
                    const x = centerX + radius * Math.cos(angle) - logo.offsetWidth / 2;
                    const y = centerY + radius * Math.sin(angle) - logo.offsetHeight / 2;
                    logo.style.left = x + 'px';
                    logo.style.top = y + 'px';
                });
            }
        }
        const addGameBtn = document.getElementById('addGameBtn');
        if(addGameBtn){
            addGameBtn.addEventListener('click', () => {
                const modalEl = document.getElementById('addGameModal');
                if(modalEl){
                    bootstrap.Modal.getOrCreateInstance(modalEl).show();
                }
            });
        }
        const openUserModalBtn = document.getElementById('openUserModal');
        if(openUserModalBtn){
            openUserModalBtn.addEventListener('click', () => {
                const modalEl = document.getElementById('userSearchModal');
                if(modalEl){
                    bootstrap.Modal.getOrCreateInstance(modalEl).show();
                }
            });
        }
        $(function(){
            const gameSelect = $('#gameSelect');
            function formatGame(option){
                if(!option.id) return option.text;
                const homeLogo = option.homeLogo || '/images/placeholder.jpg';
                const awayLogo = option.awayLogo || '/images/placeholder.jpg';
                return $(
                    `<div class="d-flex align-items-center">`+
                    `<img src="${awayLogo}" style="width:30px;height:30px;border-radius:50%;" class="me-2">`+
                    `<span>${option.awayTeamName}</span>`+
                    `<span class="mx-1">vs</span>`+
                    `<span>${option.homeTeamName}</span>`+
                    `<img src="${homeLogo}" style="width:30px;height:30px;border-radius:50%;" class="ms-2">`+
                    `<span class="ms-2 text-white">(${option.scoreDisplay})</span>`+
                    `</div>`
                );
            }
            gameSelect.select2({
                dropdownParent: $('#addGameModal'),
                placeholder:'Search Game',
                width:'100%',
                templateResult: formatGame,
                templateSelection: formatGame,
                containerCssClass:'glass-select2',
                dropdownCssClass:'glass-select2',
                ajax:{
                    url:'/pastGames/search',
                    dataType:'json',
                    delay:250,
                    data:function(params){ return { q: params.term, season: $('#seasonSelect').val() }; },
                    processResults:function(data){
                        return { results: data.map(g=>{
                            const parts = g.score.split('-');
                            const home = parts[0] || '';
                            const away = parts[1] || '';
                            return {
                                id:g.id,
                                homeTeamName:g.homeTeamName,
                                awayTeamName:g.awayTeamName,
                                homeLogo:g.homeLogo,
                                awayLogo:g.awayLogo,
                                score:g.score,
                                scoreDisplay:`${away}-${home}`,
                                text:`${g.awayTeamName} vs ${g.homeTeamName}`
                            };
                        }) };
                    }
                }
            });
            $('#addGameModal').on('shown.bs.modal', function(){
                if(!$('#seasonSelect option').length){
                    fetch('/pastGames/seasons').then(r=>r.json()).then(data=>{
                        const opts = data.map(s=>`<option value="${s}">${s}</option>`).join('');
                        $('#seasonSelect').append('<option value="">Select season</option>'+opts);
                    });
                }
            });
            $('#seasonSelect').on('change', function(){
                const val = $(this).val();
                gameSelect.prop('disabled', !val).val(null).trigger('change');
            });
        });
        const ratingRange=document.getElementById('ratingRange');
        const ratingValue=document.getElementById('ratingValue');
        if(ratingRange){
            function updateRating(){
                const val=ratingRange.value;
                ratingValue.textContent=val;
            }
            updateRating();
            ratingRange.addEventListener('input',updateRating);
        }
    </script>
</body>
</html>
