<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Profile - Stats</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/custom.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <style>
        .profile-header { background: linear-gradient(to right, #7e22ce, #14b8a6); }
        .trophy-panel { background-color: rgba(255,255,255,0.15); }
        .follow-btn { transition: background-color 0.3s, color 0.3s; }
        .avatar { border-radius: 50%; object-fit: cover; border: 2px solid rgba(255, 255, 255, 0.8); display: inline-block; }
        .profile-avatar { display: block; margin-left: auto; margin-right: auto; }
        .profile-search.form-control { background-color: rgba(255, 255, 255, 0.2) !important; border: 1px solid #ccc !important; color: #fff !important; border-radius: 8px !important; padding: 0.5rem 1rem !important; font-family: inherit !important; font-weight: bold !important; font-size: 1.1rem !important; }
        .profile-search.form-control::placeholder { color: rgba(255, 255, 255, 0.7) !important; font-style: italic; }
        .profile-search.form-control:focus { outline: none !important; box-shadow: 0 0 0 3px rgba(204, 204, 204, 0.5) !important; border-color: #bbb !important; }
        .user-search-modal .modal-content { background: linear-gradient(to right, #7e22ce, #14b8a6); background-clip: padding-box; border-radius: 1rem; border: 1px solid rgba(255, 255, 255, 0.2); box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3); color: #fff; backdrop-filter: blur(10px); font-family: inherit; }
        .user-search-modal .modal-title { font-family: inherit; font-weight: bold; font-size: 1.5rem; color: #fff; }
        .user-search-modal .btn-close { filter: invert(1); }
        .user-search-modal .profile-search.form-control { background-color: rgba(255, 255, 255, 0.2) !important; border: 1px solid #ccc !important; color: #fff !important; font-family: inherit !important; font-weight: bold !important; font-size: 1.1rem !important; border-radius: 8px !important; padding: 0.5rem 1rem 0.5rem 2.5rem !important; transition: box-shadow 0.2s ease, border-color 0.2s ease; }
        .user-search-modal .profile-search.form-control::placeholder { color: rgba(255, 255, 255, 0.7) !important; font-style: italic; }
        .user-search-modal .profile-search.form-control:focus { outline: none !important; box-shadow: 0 0 0 3px rgba(204, 204, 204, 0.5) !important; border-color: #bbb !important; }
        @media (min-width: 768px) { .profile-avatar { margin-left: 0; margin-right: 0; } }
        .avatar-lg { width: clamp(80px, 20vw, 300px); height: clamp(80px, 20vw, 300px); }
        .avatar-sm { width: clamp(40px, 10vw, 60px); height: clamp(40px, 10vw, 60px); }


        #gamesModal, #venuesModal, #teamsModal, #statesModal { color: #fff; }
        #gamesModal .gradient-text,
        #venuesModal .gradient-text,
        #teamsModal .gradient-text,
        #statesModal .gradient-text,
        #gamesModal .top-list-item,
        #gamesModal .venue-name-text,
        #gamesModal .venue-count,
        #venuesModal .top-list-item,
        #venuesModal .venue-name-text,
        #venuesModal .venue-count,
        #teamsModal .top-list-item,
        #teamsModal .venue-name-text,
        #teamsModal .venue-count,
        #statesModal .top-list-item,
        #statesModal .venue-name-text,
        #statesModal .venue-count {
            background: none !important;
            -webkit-background-clip: initial !important;
            -webkit-text-fill-color: #fff !important;
            color: #fff !important;
        }

        .venue-name-text {
    font-size: 0.7rem; /* Or even 0.95rem if you need it tighter */
    font-weight: 600;
    max-width: 10rem;
    
    
}


        #statesModal .venue-name-text {
            font-size: 1.75rem;
        }
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 2rem;
        }

        .stat-block {
            position: relative;
            overflow: hidden;
            border-radius: 1rem;
            
            background-color: rgba(255,255,255,0.15);
            backdrop-filter: blur(8px);
            display: flex;
            flex-direction: column;
            min-height: 12rem;
        }
        .stat-block::before {
            content: '';
            position: absolute;
            inset: 0;
            padding: 2px;
            border-radius: 1rem;
            background: linear-gradient(45deg,#14b8a6,#7e22ce);
            -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
            -webkit-mask-composite: xor;
            mask-composite: exclude;
            pointer-events: none;
        }

        .stat-block::after {
  content: '';
  position: absolute;
  top: 0;
  bottom: 0;
  left: 50%;
  width: 2px;
  transform: translateX(-50%);
  background: linear-gradient(to bottom, #14b8a6, #7e22ce);
  z-index: 1;
}

        .stat-left {
            flex: 1;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }

        .stat-right {
            flex: 1;
            display: flex;
            align-items: center;
            justify-content: space-between;
            min-height: 100%;
            padding: 0.5rem;
            border-radius: 0.5rem;
        }

        .stat-label {
            text-align: center;
            font-size: 1.35rem;
            font-weight: 600;
            margin-top: 0.05rem;
            background: linear-gradient(to right, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
            cursor: pointer;
        }

        .stat-label:hover {
  transform: scale(1.1);
  letter-spacing: 0.05em;
}
        .stat-content {
            flex: 1;
            display: flex;
            gap: 1rem;
        }

        .stat-number,
        .top-list-item {
            background: linear-gradient(to right,#14b8a6,#7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
        }

        .stat-number {
            font-size: 6rem;
            font-weight: 800;
        }

        .top-list-item {
            font-weight: 600;
            font-size: 1.4rem;
            display: flex;
            align-items: center;
            gap: 0.35rem;
        }

        .top-list-item img {
            width: 24px;
            height: 24px;
            border-radius: 50%;
            object-fit: cover;
        }

        .venue-name {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .venue-name-text,
        .venue-count {
            background: linear-gradient(to right, #14b8a6, #7e22ce);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            color: transparent;
            font-weight: 700;
            
        }
        #venuesTop {
            display: grid;
            grid-template-columns: 1fr 3fr 1fr;
            grid-template-rows: repeat(3, 1fr);
            row-gap: 0.5rem;
            column-gap: 0.5rem;
            align-items: center;
            align-content: start;
            min-height: 12rem;
        }

        .venue-count {
            margin-left: 1rem;
            font-size: 1.5rem;
        }
        #gamesTop {
    margin-top: 0.5rem;
    display: grid;
    grid-template-rows: repeat(3, 1fr);
    row-gap: 0.75rem;
    align-content: start;
    min-height: 12rem; /* Ensures full space exists */
}
        .top-game-link {
            display: grid;
            grid-template-columns: 1fr 2fr 1fr;
            column-gap: 0.5rem;
            align-items: center;
            text-decoration: none;
            transition: transform 0.2s;
        }
        .top-game-link:hover {
            transform: scale(1.03);
        }
        .game-rank { text-align: left; font-size: 1.7rem; margin-left: 1rem;}
        .game-matchup {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            text-align: center;
            gap: 0.25rem;
        }
        .game-rating { text-align: right; font-size: 1.6rem; margin-left: 2.5rem; margin-right: 0.5rem;}
        .game-date { font-size: 0.75rem; }
        .game-logo-sm {
            width: 1.79rem;
            height: 1.79rem;

            object-fit: cover;
        }

        #teamsTop {
            display: flex;
            gap: 0.5rem;
            align-items: stretch;
            height: 100%;
            width: 100%;
            border-radius: 0.5rem;
            overflow: hidden;
        }

        .team-stat-col {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem;
            color: #fff;
            height: 100%;
        }

        .team-count {
            font-size: 3.5rem;
            font-weight: 700;
        }

        .team-logo {
            width: 40px;
            height: 40px;
            object-fit: contain;
        }

        #statesTop {
    display: flex;
    flex-direction: row;
    justify-content: flex-start; /* <-- fix this */
    align-items: stretch;
    width: 100%;
    height: 100%;
    border-radius: 0.5rem;
    overflow: hidden;
    text-align: center;
    gap: 0.5rem; /* optional: adds space between items */
}

.state-stat-col {
    flex: 0 0 33.33%;
    max-width: 33.33%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    color: #ffffff;
    height: 100%;
    text-align: center;
}

        .state-abbr {
            font-size: 1.5rem;
            font-weight: 600;
        }
    </style>
</head>
<body class="d-flex flex-column min-vh-100">
    <%- include('partials/header') %>
    <%- include('partials/profileHeader', { user, isCurrentUser, isFollowing, canMessage, viewer, activeTab: 'stats' }) %>

    <div class="container my-4 flex-grow-1">
        <div class="stats-grid">
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="gamesCount" class="stat-number"></div>
                        <h3 id="gamesHeader" class="stat-label">Games</h3>
                    </div>
                    <div id="gamesTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="venuesCount" class="stat-number"></div>
                        <h3 id="venuesHeader" class="stat-label">Venues</h3>
                    </div>
                    <div id="venuesTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="teamsCount" class="stat-number"></div>
                        <h3 id="teamsHeader" class="stat-label">Teams</h3>
                    </div>
                    <div id="teamsTop" class="stat-right"></div>
                </div>
            </div>
            <div class="stat-block">
                <div class="stat-content">
                    <div class="stat-left">
                        <div id="statesCount" class="stat-number"></div>
                        <h3 id="statesHeader" class="stat-label">States</h3>
                    </div>
                    <div id="statesTop" class="stat-right"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="gamesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All Games</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="gamesModalBody" class="d-flex flex-column gap-2"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="venuesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All Venues</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="venuesModalBody" class="d-grid" style="grid-template-columns: 1fr 3fr 1fr; row-gap:0.5rem; column-gap:0.5rem;"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="teamsModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All Teams</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="teamsModalBody" class="d-grid" style="grid-template-columns: 1fr 1fr 3fr 1fr; row-gap:0.5rem; column-gap:0.5rem;"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade user-search-modal" id="statesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content p-3">
                <div class="modal-header border-0">
                    <h5 class="modal-title">All States</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="statesModalBody" class="d-grid" style="grid-template-columns: 1fr 3fr 1fr; row-gap:0.5rem; column-gap:0.5rem;"></div>
                </div>
            </div>
        </div>
    </div>

    <script>
        const gameEntries = <%- JSON.stringify(gameEntries || []) %>;
        const topRatedGames = <%- JSON.stringify(topRatedGames || []) %>;
        const venuesList = <%- JSON.stringify(venuesList || []) %>;
        const teamsList = <%- JSON.stringify(teamsList || []) %>;
        const teamsCount = <%- typeof teamsCount !== 'undefined' ? teamsCount : 0 %>;
        const venuesCount = <%- typeof venuesCount !== 'undefined' ? venuesCount : 0 %>;
        const statesCount = <%- typeof statesCount !== 'undefined' ? statesCount : 0 %>;

        function buildGameRows(games) {
            const ratingCounts = {};
            games.forEach(g => { ratingCounts[g.rating] = (ratingCounts[g.rating] || 0) + 1; });
            let prevRating = null;
            let rankIndex = 0;
            let displayRank = 0;
            return games.map(g => {
                rankIndex++;
                if (g.rating !== prevRating) displayRank = rankIndex;
                const prefix = ratingCounts[g.rating] > 1 ? 'T-' : '';
                prevRating = g.rating;
                return `
                <a href="/pastGames/${g._id}" class="top-game-link">
                    <div class="game-rank gradient-text fw-semibold">${prefix}${displayRank}.</div>
                    <div class="game-matchup">
                        <div class="gradient-text small fw-light game-date">${formatGameDate(g.gameDate)}</div>
                        <div class="d-flex align-items-center justify-content-center flex-wrap gap-1">
                            <img src="${g.awayTeamLogoUrl}" class="game-logo-sm" alt="">
                            <span class="gradient-text">@</span>
                            <img src="${g.homeTeamLogoUrl}" class="game-logo-sm" alt="">
                        </div>
                    </div>
                    <div class="game-rating gradient-text fw-semibold">${Number(g.rating).toFixed(1)}</div>
                </a>`;
            }).join('');
        }

        function buildVenueRows(entries){
            let prevCount = null;
            let rank = 0;
            let displayVenueRank = 0;
            return entries.map(item => {
                rank++;
                if(item.count !== prevCount) displayVenueRank = rank;
                const prefix = entries.filter(e => e.count === item.count).length > 1 ? 'T-' : '';
                prevCount = item.count;
                const v = item.venue || {};
                const name = v.name || '';
                const img = v.imgUrl || '/images/placeholder.jpg';
                return `
                    <div class="top-list-item">${prefix}${displayVenueRank}.</div>
                    <div class="venue-name"><img src="${img}" alt="${name}" class="avatar avatar-sm"><p class="venue-name-text">${name}</p></div>
                    <div class="venue-count">${item.count}</div>
                `;
            }).join('');
        }

        function buildTeamRows(entries){
            let prevCount = null;
            let rank = 0;
            let displayTeamRank = 0;
            return entries.map(item => {
                rank++;
                if(item.count !== prevCount) displayTeamRank = rank;
                const prefix = entries.filter(e => e.count === item.count).length > 1 ? 'T-' : '';
                prevCount = item.count;
                const team = item.team;
                const logo = team.logos && team.logos[0] ? team.logos[0] : '/images/placeholder.jpg';
                const name = team.school || team.name;
                return `
                    <div class="top-list-item">${prefix}${displayTeamRank}.</div>
                    <img src="${logo}" alt="${name}" class="game-logo-sm">
                    <div class="venue-name"><span class="venue-name-text">${name}</span></div>
                    <div class="venue-count">${item.count}</div>
                `;
            }).join('');
        }

        function buildStateRows(entries){
            let prevCount = null;
            let rank = 0;
            let displayStateRank = 0;
            return entries.map(([name,count]) => {
                rank++;
                if(count !== prevCount) displayStateRank = rank;
                const prefix = entries.filter(e => e[1] === count).length > 1 ? 'T-' : '';
                prevCount = count;
                return `
                    <div class="top-list-item">${prefix}${displayStateRank}.</div>
                    <div class="venue-name"><span class="venue-name-text">${name}</span></div>
                    <div class="venue-count">${count}</div>
                `;
            }).join('');
        }

        function ordinal(n){
            const s=["th","st","nd","rd"],v=n%100;
            return n+(s[(v-20)%10]||s[v]||s[0]);
        }

        function formatGameDate(d){
            if(!d) return '';
            const date = new Date(d);
            return new Intl.DateTimeFormat(navigator.language,{dateStyle:'medium'}).format(date);
        }

        function renderStats() {
    console.log({ gameEntries, topRatedGames, venuesList, teamsList });

    // Games section
    const validGames = [];
    const seenGameIds = new Set();
    for (const entry of gameEntries) {
        const g = entry && entry.game;
        if (!g || !g._id || seenGameIds.has(g._id)) continue;
        seenGameIds.add(g._id);
        validGames.push(entry);
    }
    document.getElementById('gamesCount').textContent = validGames.length;

    const gamesTopEl = document.getElementById('gamesTop');
    const allGames = gameEntries
        .filter(e => e && e.game && e.game._id)
        .map(e => {
            const g = e.game;
            const gameDate = g.startDate || g.StartDate || null;
            const awayLogo = g.awayTeam && g.awayTeam.logos && g.awayTeam.logos[0] ? g.awayTeam.logos[0] : '/images/placeholder.jpg';
            const homeLogo = g.homeTeam && g.homeTeam.logos && g.homeTeam.logos[0] ? g.homeTeam.logos[0] : '/images/placeholder.jpg';
            const rating = e.elo ? Math.round(((e.elo - 1000) * 9 / 100) + 1) : 0;
            return { _id: g._id, gameDate, awayTeamLogoUrl: awayLogo, homeTeamLogoUrl: homeLogo, rating };
        })
        .sort((a,b) => b.rating - a.rating);

    window.allRankedGames = allGames;

    gamesTopEl.innerHTML = buildGameRows(allGames.slice(0, 3));





    // Venues section
    const venueMap = {};
    venuesList.forEach(v => {
        if (!v || !v.name) return;
        if (!venueMap[v.name]) venueMap[v.name] = { count: 0, venue: v };
        venueMap[v.name].count++;
    });
    const venueEntries = Object.values(venueMap).sort((a, b) => b.count - a.count);
    window.allRankedVenues = venueEntries;
    document.getElementById('venuesCount').textContent = venuesCount;
    const venuesTopEl = document.getElementById('venuesTop');

    venuesTopEl.innerHTML = buildVenueRows(venueEntries.slice(0,3));

    // Teams section
    const teamMap = {};
    teamsList.forEach(t => {
        if (!t || !t._id) return;
        const id = t._id;
        if (!teamMap[id]) teamMap[id] = { count: 0, team: t };
        teamMap[id].count++;
    });
    const teamEntries = Object.values(teamMap).sort((a, b) => b.count - a.count);
    window.allRankedTeams = teamEntries;
    document.getElementById('teamsCount').textContent = Object.keys(teamMap).length;

    function isLight(hex){
        hex = hex.replace('#','');
        if(hex.length===3){ hex = hex.split('').map(c=>c+c).join(''); }
        const r=parseInt(hex.substr(0,2),16), g=parseInt(hex.substr(2,2),16), b=parseInt(hex.substr(4,2),16);
        const lum=(0.299*r+0.587*g+0.114*b)/255;
        return lum>0.6;
    }

    const teamsTopEl = document.getElementById('teamsTop');
    const topTeams = teamEntries.slice(0, 3);
    const colors = topTeams.map(item => {
        const t = item.team;
        let c = t.alternateColor && t.alternateColor.toLowerCase() !== '#ffffff'
            ? t.alternateColor : (t.color || '#666');
        if(!c.startsWith('#')) c = '#' + c;
        return c;
    });
    if(colors.length){
        const gradient = `linear-gradient(to right, ${colors.join(',')})`;
        teamsTopEl.style.background = gradient;
        teamsTopEl.style.borderRadius = '0.5rem';
        
    }
    teamsTopEl.innerHTML = topTeams.map(item => {
        const team = item.team;
        const logo = team.logos && team.logos[0] ? team.logos[0] : '/images/placeholder.jpg';
        return `<div class="team-stat-col">
            <div class="team-count">${item.count}</div>
            <img src="${logo}" alt="${team.school}" class="team-logo">
        </div>`;
    }).join('');

    // States section
    const stateMap = {};
    venuesList.forEach(v => {
        const s = v.state || (v.location && v.location.state);
        if (!s) return;
        stateMap[s] = (stateMap[s] || 0) + 1;
    });
    const stateEntries = Object.entries(stateMap).sort((a, b) => b[1] - a[1]);
    window.allRankedStates = stateEntries;
    document.getElementById('statesCount').textContent = statesCount;
    const statesTopEl = document.getElementById('statesTop');
    statesTopEl.style.borderRadius = '0.5rem';
    statesTopEl.style.color = '#333';

    if (stateEntries.length === 0) {
        statesTopEl.style.background = 'none';
        statesTopEl.innerHTML = '';
    } else {
        let gradient;
        if (stateEntries.length === 1) {
            gradient = 'linear-gradient(to right, #FFD700, white)';
        } else if (stateEntries.length === 2) {
            gradient = 'linear-gradient(to right, #FFD700, #C0C0C0, white)';
        } else {
            gradient = 'linear-gradient(to right, #FFD700, #C0C0C0, #CD7F32)';
        }
        statesTopEl.style.background = gradient;
        statesTopEl.innerHTML = stateEntries.slice(0, 3).map(s =>
            `<div class="state-stat-col">
                <div class="team-count">${s[1]}</div>
                <div class="state-abbr">${s[0]}</div>
            </div>`
        ).join('');
    }
}

document.addEventListener('DOMContentLoaded', renderStats);

        console.log("DOMContentLoaded event listener registered");
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        window.existingGameIds = <%- JSON.stringify((user.gameEntries || []).map(e => String(e.game))) %>;
        window.gameEntryCount = <%- (user.gameEntries || []).length %>;
        window.gameEntryNames = <%- JSON.stringify((gameEntries || []).map(e => {
            const g = e.game || {};
            return `${g.awayTeamName || ''} vs ${g.homeTeamName || ''}`;
        })) %>;
        window.eloGamesData = <%- JSON.stringify(eloGames || []) %>;
    </script>
    <script src="/js/addGameModal.js"></script>
    <script>
        const searchInput = document.getElementById('searchInput');
        const resultsEl = document.getElementById('searchResults');
        const followBtn = document.getElementById('followBtn');
        const userSearchModal = document.getElementById('userSearchModal');
        if(followBtn){
            followBtn.addEventListener('click', async function(){
                const targetId = this.dataset.user;
                const isFollowing = this.classList.contains('btn-secondary');
                const action = isFollowing ? 'unfollow' : 'follow';
                this.disabled = true;
                try {
                    const res = await fetch(`/users/${targetId}/${action}`, { method: 'POST' });
                    if(!res.ok) throw new Error();
                    const countEl = document.querySelector('#followersCount');
                    if(isFollowing){
                        this.classList.remove('btn-secondary');
                        this.classList.add('btn-primary');
                        this.textContent = 'Follow';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) - 1;
                    } else {
                        this.classList.remove('btn-primary');
                        this.classList.add('btn-secondary');
                        this.textContent = 'Following';
                        if(countEl) countEl.textContent = parseInt(countEl.textContent) + 1;
                    }
                } catch (err) {
                    alert('Action failed');
                } finally {
                    this.disabled = false;
                }
            });
        }
        if(searchInput){
            searchInput.addEventListener('input', async function(){
                const q = this.value.trim();
                if(!q){ resultsEl.innerHTML=''; return; }
                const res = await fetch('/users/search?q='+encodeURIComponent(q));
                if(!res.ok) return;
                const data = await res.json();
                const currentId = '<%= viewer ? viewer.id : "" %>';
                resultsEl.innerHTML = data.map(u=>{
                    const following = u.followers && u.followers.includes(currentId);
                    const imgUrl = `/users/${u._id}/profile-image`;
                    return `<div class="col-md-4"><div class="card p-2 d-flex flex-row align-items-center gap-2">`+
                        `<img src="${imgUrl}" class="avatar avatar-sm">`+
                        `<div class="flex-grow-1"><a href="/users/${u._id}" class="text-decoration-none">${u.username}</a></div>`+
                        (currentId && u._id !== currentId ? `<button data-id="${u._id}" class="btn btn-${following?'secondary':'primary'} btn-sm follow-toggle">${following?'Following':'Follow'}</button>`:'')+
                        `</div></div>`; }).join('');
            });
            resultsEl.addEventListener('click', async function(e){
                const btn = e.target.closest('.follow-toggle');
                if(!btn) return;
                const targetId = btn.dataset.id;
                const isFollowing = btn.classList.contains('btn-secondary');
                const action = isFollowing ? 'unfollow' : 'follow';
                btn.disabled = true;
                try{
                    const res = await fetch(`/users/${targetId}/${action}`, {method:'POST'});
                    if(!res.ok) throw new Error();
                    if(isFollowing){
                        btn.classList.remove('btn-secondary');
                        btn.classList.add('btn-primary');
                        btn.textContent = 'Follow';
                    }else{
                        btn.classList.remove('btn-primary');
                        btn.classList.add('btn-secondary');
                        btn.textContent = 'Following';
                    }
                }catch(err){
                    alert('Action failed');
                }finally{
                    btn.disabled = false;
                }
            });
        }
        if(userSearchModal){
            userSearchModal.addEventListener('hidden.bs.modal', () => {
                if(searchInput){
                    searchInput.value = '';
                    resultsEl.innerHTML = '';
                }
            });
        }
        const wrapper = document.querySelector('.profile-avatar-wrapper');
        if(wrapper){
            const logos = wrapper.querySelectorAll('.chain-logo');
            if(logos.length){
                const radius = wrapper.offsetWidth * 0.6;
                const centerX = wrapper.offsetWidth / 2;
                const centerY = wrapper.offsetHeight / 2;
                const angleStep = Math.PI / (logos.length + 1);
                logos.forEach((logo, idx) => {
                    const angle = Math.PI - angleStep * (idx + 1);
                    const x = centerX + radius * Math.cos(angle) - logo.offsetWidth / 2;
                    const y = centerY + radius * Math.sin(angle) - logo.offsetHeight / 2;
                    logo.style.left = x + 'px';
                    logo.style.top = y + 'px';
                });
            }
        }
        const addGameBtn = document.getElementById('addGameBtn');
        if(addGameBtn){
            addGameBtn.addEventListener('click', () => {
                const modalEl = document.getElementById('addGameModal');
                if(modalEl){
                    bootstrap.Modal.getOrCreateInstance(modalEl).show();
                }
            });
        }
        const gamesHeader = document.getElementById('gamesHeader');
        const venuesHeader = document.getElementById('venuesHeader');
        const teamsHeader = document.getElementById('teamsHeader');
        const statesHeader = document.getElementById('statesHeader');
        const gamesModal = document.getElementById('gamesModal');
        const venuesModal = document.getElementById('venuesModal');
        const teamsModal = document.getElementById('teamsModal');
        const statesModal = document.getElementById('statesModal');
        if(gamesHeader && gamesModal){
            gamesHeader.addEventListener('click', () => {
                const body = document.getElementById('gamesModalBody');
                if(body){
                    body.innerHTML = buildGameRows(window.allRankedGames);
                }
                bootstrap.Modal.getOrCreateInstance(gamesModal).show();
            });
        }
        if(venuesHeader && venuesModal){
            venuesHeader.addEventListener('click', () => {
                const body = document.getElementById('venuesModalBody');
                if(body){
                    body.innerHTML = buildVenueRows(window.allRankedVenues);
                }
                bootstrap.Modal.getOrCreateInstance(venuesModal).show();
            });
        }
        if(teamsHeader && teamsModal){
            teamsHeader.addEventListener('click', () => {
                const body = document.getElementById('teamsModalBody');
                if(body){
                    body.innerHTML = buildTeamRows(window.allRankedTeams);
                }
                bootstrap.Modal.getOrCreateInstance(teamsModal).show();
            });
        }
        if(statesHeader && statesModal){
            statesHeader.addEventListener('click', () => {
                const body = document.getElementById('statesModalBody');
                if(body){
                    body.innerHTML = buildStateRows(window.allRankedStates);
                }
                bootstrap.Modal.getOrCreateInstance(statesModal).show();
            });
        }
        const openUserModalBtn = document.getElementById('openUserModal');
        if(openUserModalBtn){
            openUserModalBtn.addEventListener('click', () => {
                const modalEl = document.getElementById('userSearchModal');
                if(modalEl){
                    bootstrap.Modal.getOrCreateInstance(modalEl).show();
                }
            });
        }

    </script>
</body>
</html>
